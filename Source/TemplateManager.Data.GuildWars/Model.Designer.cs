//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TemplateManager.Data.GuildWars {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Model")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Model : global::System.Data.DataSet {
        
        private SkillsDataTable tableSkills;
        
        private SkillNameDataTable tableSkillName;
        
        private RemovesDataTable tableRemoves;
        
        private SkillsRemoves_LookupDataTable tableSkillsRemoves_Lookup;
        
        private CampaignsDataTable tableCampaigns;
        
        private SkillTypesDataTable tableSkillTypes;
        
        private SpecialTypesDataTable tableSpecialTypes;
        
        private RangesDataTable tableRanges;
        
        private AreaOfEffectsDataTable tableAreaOfEffects;
        
        private AttributesDataTable tableAttributes;
        
        private ProfessionsDataTable tableProfessions;
        
        private TargetsDataTable tableTargets;
        
        private ProjectilesDataTable tableProjectiles;
        
        private CausesDataTable tableCauses;
        
        private SkillsCauses_LookupDataTable tableSkillsCauses_Lookup;
        
        private CategoriesDataTable tableCategories;
        
        private SkillsCategories_LookupDataTable tableSkillsCategories_Lookup;
        
        private RelatedSkillsDataTable tableRelatedSkills;
        
        private ImagesDataTable tableImages;
        
        private SkillDescriptionDataTable tableSkillDescription;
        
        private global::System.Data.DataRelation relationFK_Skills_SkillText;
        
        private global::System.Data.DataRelation relationFK_Skills_AreaOfEffects;
        
        private global::System.Data.DataRelation relationFK_Skills_Campaigns;
        
        private global::System.Data.DataRelation relationFK_Skills_SkillTypes;
        
        private global::System.Data.DataRelation relationFK_Skills_SpecialTypes;
        
        private global::System.Data.DataRelation relationFK_Skills_Targets;
        
        private global::System.Data.DataRelation relationFK_Skills_Projectiles;
        
        private global::System.Data.DataRelation relationFK_Skills_Attributes;
        
        private global::System.Data.DataRelation relationFK_Causes_SkillsCauses_Lookup;
        
        private global::System.Data.DataRelation relationFK_Skills_SkillsCauses_Lookup;
        
        private global::System.Data.DataRelation relationFK_Skills_SkillsRemoves_Lookup;
        
        private global::System.Data.DataRelation relationFK_Removes_SkillsRemoves_Lookup;
        
        private global::System.Data.DataRelation relationCategories_SkillsCategories_Lookup;
        
        private global::System.Data.DataRelation relationSkills_SkillsCategories_Lookup;
        
        private global::System.Data.DataRelation relationFK_Skills_Ranges;
        
        private global::System.Data.DataRelation relationSkills_RelatedSkills;
        
        private global::System.Data.DataRelation relationRelatedSkills_Skills;
        
        private global::System.Data.DataRelation relationFK_Skills_Professions;
        
        private global::System.Data.DataRelation relationSkills_Images;
        
        private global::System.Data.DataRelation relationSkillTypes_SkillTypes;
        
        private global::System.Data.DataRelation relationAttributes_Professions;
        
        private global::System.Data.DataRelation relationProfessions_Images;
        
        private global::System.Data.DataRelation relationSkills_SkillDescription;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Model() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Model(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Skills"] != null)) {
                    base.Tables.Add(new SkillsDataTable(ds.Tables["Skills"]));
                }
                if ((ds.Tables["SkillName"] != null)) {
                    base.Tables.Add(new SkillNameDataTable(ds.Tables["SkillName"]));
                }
                if ((ds.Tables["Removes"] != null)) {
                    base.Tables.Add(new RemovesDataTable(ds.Tables["Removes"]));
                }
                if ((ds.Tables["SkillsRemoves_Lookup"] != null)) {
                    base.Tables.Add(new SkillsRemoves_LookupDataTable(ds.Tables["SkillsRemoves_Lookup"]));
                }
                if ((ds.Tables["Campaigns"] != null)) {
                    base.Tables.Add(new CampaignsDataTable(ds.Tables["Campaigns"]));
                }
                if ((ds.Tables["SkillTypes"] != null)) {
                    base.Tables.Add(new SkillTypesDataTable(ds.Tables["SkillTypes"]));
                }
                if ((ds.Tables["SpecialTypes"] != null)) {
                    base.Tables.Add(new SpecialTypesDataTable(ds.Tables["SpecialTypes"]));
                }
                if ((ds.Tables["Ranges"] != null)) {
                    base.Tables.Add(new RangesDataTable(ds.Tables["Ranges"]));
                }
                if ((ds.Tables["AreaOfEffects"] != null)) {
                    base.Tables.Add(new AreaOfEffectsDataTable(ds.Tables["AreaOfEffects"]));
                }
                if ((ds.Tables["Attributes"] != null)) {
                    base.Tables.Add(new AttributesDataTable(ds.Tables["Attributes"]));
                }
                if ((ds.Tables["Professions"] != null)) {
                    base.Tables.Add(new ProfessionsDataTable(ds.Tables["Professions"]));
                }
                if ((ds.Tables["Targets"] != null)) {
                    base.Tables.Add(new TargetsDataTable(ds.Tables["Targets"]));
                }
                if ((ds.Tables["Projectiles"] != null)) {
                    base.Tables.Add(new ProjectilesDataTable(ds.Tables["Projectiles"]));
                }
                if ((ds.Tables["Causes"] != null)) {
                    base.Tables.Add(new CausesDataTable(ds.Tables["Causes"]));
                }
                if ((ds.Tables["SkillsCauses_Lookup"] != null)) {
                    base.Tables.Add(new SkillsCauses_LookupDataTable(ds.Tables["SkillsCauses_Lookup"]));
                }
                if ((ds.Tables["Categories"] != null)) {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["SkillsCategories_Lookup"] != null)) {
                    base.Tables.Add(new SkillsCategories_LookupDataTable(ds.Tables["SkillsCategories_Lookup"]));
                }
                if ((ds.Tables["RelatedSkills"] != null)) {
                    base.Tables.Add(new RelatedSkillsDataTable(ds.Tables["RelatedSkills"]));
                }
                if ((ds.Tables["Images"] != null)) {
                    base.Tables.Add(new ImagesDataTable(ds.Tables["Images"]));
                }
                if ((ds.Tables["SkillDescription"] != null)) {
                    base.Tables.Add(new SkillDescriptionDataTable(ds.Tables["SkillDescription"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillsDataTable Skills {
            get {
                return this.tableSkills;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillNameDataTable SkillName {
            get {
                return this.tableSkillName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RemovesDataTable Removes {
            get {
                return this.tableRemoves;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillsRemoves_LookupDataTable SkillsRemoves_Lookup {
            get {
                return this.tableSkillsRemoves_Lookup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CampaignsDataTable Campaigns {
            get {
                return this.tableCampaigns;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillTypesDataTable SkillTypes {
            get {
                return this.tableSkillTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SpecialTypesDataTable SpecialTypes {
            get {
                return this.tableSpecialTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RangesDataTable Ranges {
            get {
                return this.tableRanges;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AreaOfEffectsDataTable AreaOfEffects {
            get {
                return this.tableAreaOfEffects;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AttributesDataTable Attributes {
            get {
                return this.tableAttributes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProfessionsDataTable Professions {
            get {
                return this.tableProfessions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TargetsDataTable Targets {
            get {
                return this.tableTargets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectilesDataTable Projectiles {
            get {
                return this.tableProjectiles;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CausesDataTable Causes {
            get {
                return this.tableCauses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillsCauses_LookupDataTable SkillsCauses_Lookup {
            get {
                return this.tableSkillsCauses_Lookup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoriesDataTable Categories {
            get {
                return this.tableCategories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillsCategories_LookupDataTable SkillsCategories_Lookup {
            get {
                return this.tableSkillsCategories_Lookup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RelatedSkillsDataTable RelatedSkills {
            get {
                return this.tableRelatedSkills;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagesDataTable Images {
            get {
                return this.tableImages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillDescriptionDataTable SkillDescription {
            get {
                return this.tableSkillDescription;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Model cln = ((Model)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Skills"] != null)) {
                    base.Tables.Add(new SkillsDataTable(ds.Tables["Skills"]));
                }
                if ((ds.Tables["SkillName"] != null)) {
                    base.Tables.Add(new SkillNameDataTable(ds.Tables["SkillName"]));
                }
                if ((ds.Tables["Removes"] != null)) {
                    base.Tables.Add(new RemovesDataTable(ds.Tables["Removes"]));
                }
                if ((ds.Tables["SkillsRemoves_Lookup"] != null)) {
                    base.Tables.Add(new SkillsRemoves_LookupDataTable(ds.Tables["SkillsRemoves_Lookup"]));
                }
                if ((ds.Tables["Campaigns"] != null)) {
                    base.Tables.Add(new CampaignsDataTable(ds.Tables["Campaigns"]));
                }
                if ((ds.Tables["SkillTypes"] != null)) {
                    base.Tables.Add(new SkillTypesDataTable(ds.Tables["SkillTypes"]));
                }
                if ((ds.Tables["SpecialTypes"] != null)) {
                    base.Tables.Add(new SpecialTypesDataTable(ds.Tables["SpecialTypes"]));
                }
                if ((ds.Tables["Ranges"] != null)) {
                    base.Tables.Add(new RangesDataTable(ds.Tables["Ranges"]));
                }
                if ((ds.Tables["AreaOfEffects"] != null)) {
                    base.Tables.Add(new AreaOfEffectsDataTable(ds.Tables["AreaOfEffects"]));
                }
                if ((ds.Tables["Attributes"] != null)) {
                    base.Tables.Add(new AttributesDataTable(ds.Tables["Attributes"]));
                }
                if ((ds.Tables["Professions"] != null)) {
                    base.Tables.Add(new ProfessionsDataTable(ds.Tables["Professions"]));
                }
                if ((ds.Tables["Targets"] != null)) {
                    base.Tables.Add(new TargetsDataTable(ds.Tables["Targets"]));
                }
                if ((ds.Tables["Projectiles"] != null)) {
                    base.Tables.Add(new ProjectilesDataTable(ds.Tables["Projectiles"]));
                }
                if ((ds.Tables["Causes"] != null)) {
                    base.Tables.Add(new CausesDataTable(ds.Tables["Causes"]));
                }
                if ((ds.Tables["SkillsCauses_Lookup"] != null)) {
                    base.Tables.Add(new SkillsCauses_LookupDataTable(ds.Tables["SkillsCauses_Lookup"]));
                }
                if ((ds.Tables["Categories"] != null)) {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["SkillsCategories_Lookup"] != null)) {
                    base.Tables.Add(new SkillsCategories_LookupDataTable(ds.Tables["SkillsCategories_Lookup"]));
                }
                if ((ds.Tables["RelatedSkills"] != null)) {
                    base.Tables.Add(new RelatedSkillsDataTable(ds.Tables["RelatedSkills"]));
                }
                if ((ds.Tables["Images"] != null)) {
                    base.Tables.Add(new ImagesDataTable(ds.Tables["Images"]));
                }
                if ((ds.Tables["SkillDescription"] != null)) {
                    base.Tables.Add(new SkillDescriptionDataTable(ds.Tables["SkillDescription"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSkills = ((SkillsDataTable)(base.Tables["Skills"]));
            if ((initTable == true)) {
                if ((this.tableSkills != null)) {
                    this.tableSkills.InitVars();
                }
            }
            this.tableSkillName = ((SkillNameDataTable)(base.Tables["SkillName"]));
            if ((initTable == true)) {
                if ((this.tableSkillName != null)) {
                    this.tableSkillName.InitVars();
                }
            }
            this.tableRemoves = ((RemovesDataTable)(base.Tables["Removes"]));
            if ((initTable == true)) {
                if ((this.tableRemoves != null)) {
                    this.tableRemoves.InitVars();
                }
            }
            this.tableSkillsRemoves_Lookup = ((SkillsRemoves_LookupDataTable)(base.Tables["SkillsRemoves_Lookup"]));
            if ((initTable == true)) {
                if ((this.tableSkillsRemoves_Lookup != null)) {
                    this.tableSkillsRemoves_Lookup.InitVars();
                }
            }
            this.tableCampaigns = ((CampaignsDataTable)(base.Tables["Campaigns"]));
            if ((initTable == true)) {
                if ((this.tableCampaigns != null)) {
                    this.tableCampaigns.InitVars();
                }
            }
            this.tableSkillTypes = ((SkillTypesDataTable)(base.Tables["SkillTypes"]));
            if ((initTable == true)) {
                if ((this.tableSkillTypes != null)) {
                    this.tableSkillTypes.InitVars();
                }
            }
            this.tableSpecialTypes = ((SpecialTypesDataTable)(base.Tables["SpecialTypes"]));
            if ((initTable == true)) {
                if ((this.tableSpecialTypes != null)) {
                    this.tableSpecialTypes.InitVars();
                }
            }
            this.tableRanges = ((RangesDataTable)(base.Tables["Ranges"]));
            if ((initTable == true)) {
                if ((this.tableRanges != null)) {
                    this.tableRanges.InitVars();
                }
            }
            this.tableAreaOfEffects = ((AreaOfEffectsDataTable)(base.Tables["AreaOfEffects"]));
            if ((initTable == true)) {
                if ((this.tableAreaOfEffects != null)) {
                    this.tableAreaOfEffects.InitVars();
                }
            }
            this.tableAttributes = ((AttributesDataTable)(base.Tables["Attributes"]));
            if ((initTable == true)) {
                if ((this.tableAttributes != null)) {
                    this.tableAttributes.InitVars();
                }
            }
            this.tableProfessions = ((ProfessionsDataTable)(base.Tables["Professions"]));
            if ((initTable == true)) {
                if ((this.tableProfessions != null)) {
                    this.tableProfessions.InitVars();
                }
            }
            this.tableTargets = ((TargetsDataTable)(base.Tables["Targets"]));
            if ((initTable == true)) {
                if ((this.tableTargets != null)) {
                    this.tableTargets.InitVars();
                }
            }
            this.tableProjectiles = ((ProjectilesDataTable)(base.Tables["Projectiles"]));
            if ((initTable == true)) {
                if ((this.tableProjectiles != null)) {
                    this.tableProjectiles.InitVars();
                }
            }
            this.tableCauses = ((CausesDataTable)(base.Tables["Causes"]));
            if ((initTable == true)) {
                if ((this.tableCauses != null)) {
                    this.tableCauses.InitVars();
                }
            }
            this.tableSkillsCauses_Lookup = ((SkillsCauses_LookupDataTable)(base.Tables["SkillsCauses_Lookup"]));
            if ((initTable == true)) {
                if ((this.tableSkillsCauses_Lookup != null)) {
                    this.tableSkillsCauses_Lookup.InitVars();
                }
            }
            this.tableCategories = ((CategoriesDataTable)(base.Tables["Categories"]));
            if ((initTable == true)) {
                if ((this.tableCategories != null)) {
                    this.tableCategories.InitVars();
                }
            }
            this.tableSkillsCategories_Lookup = ((SkillsCategories_LookupDataTable)(base.Tables["SkillsCategories_Lookup"]));
            if ((initTable == true)) {
                if ((this.tableSkillsCategories_Lookup != null)) {
                    this.tableSkillsCategories_Lookup.InitVars();
                }
            }
            this.tableRelatedSkills = ((RelatedSkillsDataTable)(base.Tables["RelatedSkills"]));
            if ((initTable == true)) {
                if ((this.tableRelatedSkills != null)) {
                    this.tableRelatedSkills.InitVars();
                }
            }
            this.tableImages = ((ImagesDataTable)(base.Tables["Images"]));
            if ((initTable == true)) {
                if ((this.tableImages != null)) {
                    this.tableImages.InitVars();
                }
            }
            this.tableSkillDescription = ((SkillDescriptionDataTable)(base.Tables["SkillDescription"]));
            if ((initTable == true)) {
                if ((this.tableSkillDescription != null)) {
                    this.tableSkillDescription.InitVars();
                }
            }
            this.relationFK_Skills_SkillText = this.Relations["FK_Skills_SkillText"];
            this.relationFK_Skills_AreaOfEffects = this.Relations["FK_Skills_AreaOfEffects"];
            this.relationFK_Skills_Campaigns = this.Relations["FK_Skills_Campaigns"];
            this.relationFK_Skills_SkillTypes = this.Relations["FK_Skills_SkillTypes"];
            this.relationFK_Skills_SpecialTypes = this.Relations["FK_Skills_SpecialTypes"];
            this.relationFK_Skills_Targets = this.Relations["FK_Skills_Targets"];
            this.relationFK_Skills_Projectiles = this.Relations["FK_Skills_Projectiles"];
            this.relationFK_Skills_Attributes = this.Relations["FK_Skills_Attributes"];
            this.relationFK_Causes_SkillsCauses_Lookup = this.Relations["FK_Causes_SkillsCauses_Lookup"];
            this.relationFK_Skills_SkillsCauses_Lookup = this.Relations["FK_Skills_SkillsCauses_Lookup"];
            this.relationFK_Skills_SkillsRemoves_Lookup = this.Relations["FK_Skills_SkillsRemoves_Lookup"];
            this.relationFK_Removes_SkillsRemoves_Lookup = this.Relations["FK_Removes_SkillsRemoves_Lookup"];
            this.relationCategories_SkillsCategories_Lookup = this.Relations["Categories_SkillsCategories_Lookup"];
            this.relationSkills_SkillsCategories_Lookup = this.Relations["Skills_SkillsCategories_Lookup"];
            this.relationFK_Skills_Ranges = this.Relations["FK_Skills_Ranges"];
            this.relationSkills_RelatedSkills = this.Relations["Skills_RelatedSkills"];
            this.relationRelatedSkills_Skills = this.Relations["RelatedSkills_Skills"];
            this.relationFK_Skills_Professions = this.Relations["FK_Skills_Professions"];
            this.relationSkills_Images = this.Relations["Skills_Images"];
            this.relationSkillTypes_SkillTypes = this.Relations["SkillTypes_SkillTypes"];
            this.relationAttributes_Professions = this.Relations["Attributes_Professions"];
            this.relationProfessions_Images = this.Relations["Professions_Images"];
            this.relationSkills_SkillDescription = this.Relations["Skills_SkillDescription"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Model";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Data.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSkills = new SkillsDataTable();
            base.Tables.Add(this.tableSkills);
            this.tableSkillName = new SkillNameDataTable();
            base.Tables.Add(this.tableSkillName);
            this.tableRemoves = new RemovesDataTable();
            base.Tables.Add(this.tableRemoves);
            this.tableSkillsRemoves_Lookup = new SkillsRemoves_LookupDataTable();
            base.Tables.Add(this.tableSkillsRemoves_Lookup);
            this.tableCampaigns = new CampaignsDataTable();
            base.Tables.Add(this.tableCampaigns);
            this.tableSkillTypes = new SkillTypesDataTable();
            base.Tables.Add(this.tableSkillTypes);
            this.tableSpecialTypes = new SpecialTypesDataTable();
            base.Tables.Add(this.tableSpecialTypes);
            this.tableRanges = new RangesDataTable();
            base.Tables.Add(this.tableRanges);
            this.tableAreaOfEffects = new AreaOfEffectsDataTable();
            base.Tables.Add(this.tableAreaOfEffects);
            this.tableAttributes = new AttributesDataTable();
            base.Tables.Add(this.tableAttributes);
            this.tableProfessions = new ProfessionsDataTable();
            base.Tables.Add(this.tableProfessions);
            this.tableTargets = new TargetsDataTable();
            base.Tables.Add(this.tableTargets);
            this.tableProjectiles = new ProjectilesDataTable();
            base.Tables.Add(this.tableProjectiles);
            this.tableCauses = new CausesDataTable();
            base.Tables.Add(this.tableCauses);
            this.tableSkillsCauses_Lookup = new SkillsCauses_LookupDataTable();
            base.Tables.Add(this.tableSkillsCauses_Lookup);
            this.tableCategories = new CategoriesDataTable();
            base.Tables.Add(this.tableCategories);
            this.tableSkillsCategories_Lookup = new SkillsCategories_LookupDataTable();
            base.Tables.Add(this.tableSkillsCategories_Lookup);
            this.tableRelatedSkills = new RelatedSkillsDataTable();
            base.Tables.Add(this.tableRelatedSkills);
            this.tableImages = new ImagesDataTable();
            base.Tables.Add(this.tableImages);
            this.tableSkillDescription = new SkillDescriptionDataTable();
            base.Tables.Add(this.tableSkillDescription);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Skills_SkillText", new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillName.IdColumn});
            this.tableSkillName.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_Skills_SkillText = new global::System.Data.DataRelation("FK_Skills_SkillText", new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillName.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_SkillText);
            this.relationFK_Skills_AreaOfEffects = new global::System.Data.DataRelation("FK_Skills_AreaOfEffects", new global::System.Data.DataColumn[] {
                        this.tableSkills.AreaOfEffectRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAreaOfEffects.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_AreaOfEffects);
            this.relationFK_Skills_Campaigns = new global::System.Data.DataRelation("FK_Skills_Campaigns", new global::System.Data.DataColumn[] {
                        this.tableSkills.CampaignRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableCampaigns.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_Campaigns);
            this.relationFK_Skills_SkillTypes = new global::System.Data.DataRelation("FK_Skills_SkillTypes", new global::System.Data.DataColumn[] {
                        this.tableSkills.TypeRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillTypes.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_SkillTypes);
            this.relationFK_Skills_SpecialTypes = new global::System.Data.DataRelation("FK_Skills_SpecialTypes", new global::System.Data.DataColumn[] {
                        this.tableSkills.SpecialTypeRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSpecialTypes.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_SpecialTypes);
            this.relationFK_Skills_Targets = new global::System.Data.DataRelation("FK_Skills_Targets", new global::System.Data.DataColumn[] {
                        this.tableSkills.TargetRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTargets.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_Targets);
            this.relationFK_Skills_Projectiles = new global::System.Data.DataRelation("FK_Skills_Projectiles", new global::System.Data.DataColumn[] {
                        this.tableSkills.ProjectileRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProjectiles.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_Projectiles);
            this.relationFK_Skills_Attributes = new global::System.Data.DataRelation("FK_Skills_Attributes", new global::System.Data.DataColumn[] {
                        this.tableSkills.AttributeRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableAttributes.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_Attributes);
            this.relationFK_Causes_SkillsCauses_Lookup = new global::System.Data.DataRelation("FK_Causes_SkillsCauses_Lookup", new global::System.Data.DataColumn[] {
                        this.tableCauses.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillsCauses_Lookup.CausesIdColumn}, false);
            this.Relations.Add(this.relationFK_Causes_SkillsCauses_Lookup);
            this.relationFK_Skills_SkillsCauses_Lookup = new global::System.Data.DataRelation("FK_Skills_SkillsCauses_Lookup", new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillsCauses_Lookup.SkillsIdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_SkillsCauses_Lookup);
            this.relationFK_Skills_SkillsRemoves_Lookup = new global::System.Data.DataRelation("FK_Skills_SkillsRemoves_Lookup", new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillsRemoves_Lookup.SkillsIdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_SkillsRemoves_Lookup);
            this.relationFK_Removes_SkillsRemoves_Lookup = new global::System.Data.DataRelation("FK_Removes_SkillsRemoves_Lookup", new global::System.Data.DataColumn[] {
                        this.tableRemoves.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillsRemoves_Lookup.RemovesIdColumn}, false);
            this.Relations.Add(this.relationFK_Removes_SkillsRemoves_Lookup);
            this.relationCategories_SkillsCategories_Lookup = new global::System.Data.DataRelation("Categories_SkillsCategories_Lookup", new global::System.Data.DataColumn[] {
                        this.tableCategories.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillsCategories_Lookup.CategoriesIdColumn}, false);
            this.Relations.Add(this.relationCategories_SkillsCategories_Lookup);
            this.relationSkills_SkillsCategories_Lookup = new global::System.Data.DataRelation("Skills_SkillsCategories_Lookup", new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillsCategories_Lookup.SkillsIdColumn}, false);
            this.Relations.Add(this.relationSkills_SkillsCategories_Lookup);
            this.relationFK_Skills_Ranges = new global::System.Data.DataRelation("FK_Skills_Ranges", new global::System.Data.DataColumn[] {
                        this.tableSkills.RangeRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRanges.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_Ranges);
            this.relationSkills_RelatedSkills = new global::System.Data.DataRelation("Skills_RelatedSkills", new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRelatedSkills.ParentSkillIdColumn}, false);
            this.Relations.Add(this.relationSkills_RelatedSkills);
            this.relationRelatedSkills_Skills = new global::System.Data.DataRelation("RelatedSkills_Skills", new global::System.Data.DataColumn[] {
                        this.tableRelatedSkills.RelatedSkillIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, false);
            this.Relations.Add(this.relationRelatedSkills_Skills);
            this.relationFK_Skills_Professions = new global::System.Data.DataRelation("FK_Skills_Professions", new global::System.Data.DataColumn[] {
                        this.tableSkills.ProfessionRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProfessions.IdColumn}, false);
            this.Relations.Add(this.relationFK_Skills_Professions);
            this.relationSkills_Images = new global::System.Data.DataRelation("Skills_Images", new global::System.Data.DataColumn[] {
                        this.tableSkills.ImageRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableImages.IdColumn}, false);
            this.Relations.Add(this.relationSkills_Images);
            this.relationSkillTypes_SkillTypes = new global::System.Data.DataRelation("SkillTypes_SkillTypes", new global::System.Data.DataColumn[] {
                        this.tableSkillTypes.ParentTypeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillTypes.IdColumn}, false);
            this.Relations.Add(this.relationSkillTypes_SkillTypes);
            this.relationAttributes_Professions = new global::System.Data.DataRelation("Attributes_Professions", new global::System.Data.DataColumn[] {
                        this.tableAttributes.ProfessionRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableProfessions.IdColumn}, false);
            this.Relations.Add(this.relationAttributes_Professions);
            this.relationProfessions_Images = new global::System.Data.DataRelation("Professions_Images", new global::System.Data.DataColumn[] {
                        this.tableProfessions.ImageRefIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableImages.IdColumn}, false);
            this.Relations.Add(this.relationProfessions_Images);
            this.relationSkills_SkillDescription = new global::System.Data.DataRelation("Skills_SkillDescription", new global::System.Data.DataColumn[] {
                        this.tableSkills.IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSkillDescription.IdColumn}, false);
            this.Relations.Add(this.relationSkills_SkillDescription);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkills() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRemoves() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillsRemoves_Lookup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCampaigns() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSpecialTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRanges() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAreaOfEffects() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAttributes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProfessions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTargets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectiles() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCauses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillsCauses_Lookup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillsCategories_Lookup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRelatedSkills() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillDescription() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Model ds = new Model();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SkillsRowChangeEventHandler(object sender, SkillsRowChangeEvent e);
        
        public delegate void SkillNameRowChangeEventHandler(object sender, SkillNameRowChangeEvent e);
        
        public delegate void RemovesRowChangeEventHandler(object sender, RemovesRowChangeEvent e);
        
        public delegate void SkillsRemoves_LookupRowChangeEventHandler(object sender, SkillsRemoves_LookupRowChangeEvent e);
        
        public delegate void CampaignsRowChangeEventHandler(object sender, CampaignsRowChangeEvent e);
        
        public delegate void SkillTypesRowChangeEventHandler(object sender, SkillTypesRowChangeEvent e);
        
        public delegate void SpecialTypesRowChangeEventHandler(object sender, SpecialTypesRowChangeEvent e);
        
        public delegate void RangesRowChangeEventHandler(object sender, RangesRowChangeEvent e);
        
        public delegate void AreaOfEffectsRowChangeEventHandler(object sender, AreaOfEffectsRowChangeEvent e);
        
        public delegate void AttributesRowChangeEventHandler(object sender, AttributesRowChangeEvent e);
        
        public delegate void ProfessionsRowChangeEventHandler(object sender, ProfessionsRowChangeEvent e);
        
        public delegate void TargetsRowChangeEventHandler(object sender, TargetsRowChangeEvent e);
        
        public delegate void ProjectilesRowChangeEventHandler(object sender, ProjectilesRowChangeEvent e);
        
        public delegate void CausesRowChangeEventHandler(object sender, CausesRowChangeEvent e);
        
        public delegate void SkillsCauses_LookupRowChangeEventHandler(object sender, SkillsCauses_LookupRowChangeEvent e);
        
        public delegate void CategoriesRowChangeEventHandler(object sender, CategoriesRowChangeEvent e);
        
        public delegate void SkillsCategories_LookupRowChangeEventHandler(object sender, SkillsCategories_LookupRowChangeEvent e);
        
        public delegate void RelatedSkillsRowChangeEventHandler(object sender, RelatedSkillsRowChangeEvent e);
        
        public delegate void ImagesRowChangeEventHandler(object sender, ImagesRowChangeEvent e);
        
        public delegate void SkillDescriptionRowChangeEventHandler(object sender, SkillDescriptionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillsDataTable : global::System.Data.TypedTableBase<SkillsRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnSourceActivationTime;
            
            private global::System.Data.DataColumn columnSourceIsElite;
            
            private global::System.Data.DataColumn columnSourceEnergyCost;
            
            private global::System.Data.DataColumn columnSourceRechargeTime;
            
            private global::System.Data.DataColumn columnSourceUpkeepCost;
            
            private global::System.Data.DataColumn columnSourceAdrenalineCost;
            
            private global::System.Data.DataColumn columnCampaignRefId;
            
            private global::System.Data.DataColumn columnProfessionRefId;
            
            private global::System.Data.DataColumn columnAttributeRefId;
            
            private global::System.Data.DataColumn columnSourceSacrificeCost;
            
            private global::System.Data.DataColumn columnSourceCausesExhaustion;
            
            private global::System.Data.DataColumn columnTargetRefId;
            
            private global::System.Data.DataColumn columnRangeRefId;
            
            private global::System.Data.DataColumn columnSpecialTypeRefId;
            
            private global::System.Data.DataColumn columnSourceIsPvEOnly;
            
            private global::System.Data.DataColumn columnSourceHasPvP;
            
            private global::System.Data.DataColumn columnProjectileRefId;
            
            private global::System.Data.DataColumn columnAreaOfEffectRefId;
            
            private global::System.Data.DataColumn columnSourceIsPvP;
            
            private global::System.Data.DataColumn columnTypeRefId;
            
            private global::System.Data.DataColumn columnSourceWikiLink;
            
            private global::System.Data.DataColumn columnIsRemoved;
            
            private global::System.Data.DataColumn columnIsValid;
            
            private global::System.Data.DataColumn columnImageRefId;
            
            private global::System.Data.DataColumn columnTemplateId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsDataTable() {
                this.TableName = "Skills";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceActivationTimeColumn {
                get {
                    return this.columnSourceActivationTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceIsEliteColumn {
                get {
                    return this.columnSourceIsElite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceEnergyCostColumn {
                get {
                    return this.columnSourceEnergyCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceRechargeTimeColumn {
                get {
                    return this.columnSourceRechargeTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceUpkeepCostColumn {
                get {
                    return this.columnSourceUpkeepCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceAdrenalineCostColumn {
                get {
                    return this.columnSourceAdrenalineCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CampaignRefIdColumn {
                get {
                    return this.columnCampaignRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfessionRefIdColumn {
                get {
                    return this.columnProfessionRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttributeRefIdColumn {
                get {
                    return this.columnAttributeRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceSacrificeCostColumn {
                get {
                    return this.columnSourceSacrificeCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceCausesExhaustionColumn {
                get {
                    return this.columnSourceCausesExhaustion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TargetRefIdColumn {
                get {
                    return this.columnTargetRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RangeRefIdColumn {
                get {
                    return this.columnRangeRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpecialTypeRefIdColumn {
                get {
                    return this.columnSpecialTypeRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceIsPvEOnlyColumn {
                get {
                    return this.columnSourceIsPvEOnly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceHasPvPColumn {
                get {
                    return this.columnSourceHasPvP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectileRefIdColumn {
                get {
                    return this.columnProjectileRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaOfEffectRefIdColumn {
                get {
                    return this.columnAreaOfEffectRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceIsPvPColumn {
                get {
                    return this.columnSourceIsPvP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeRefIdColumn {
                get {
                    return this.columnTypeRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceWikiLinkColumn {
                get {
                    return this.columnSourceWikiLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRemovedColumn {
                get {
                    return this.columnIsRemoved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValidColumn {
                get {
                    return this.columnIsValid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageRefIdColumn {
                get {
                    return this.columnImageRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIdColumn {
                get {
                    return this.columnTemplateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow this[int index] {
                get {
                    return ((SkillsRow)(this.Rows[index]));
                }
            }
            
            public event SkillsRowChangeEventHandler SkillsRowChanging;
            
            public event SkillsRowChangeEventHandler SkillsRowChanged;
            
            public event SkillsRowChangeEventHandler SkillsRowDeleting;
            
            public event SkillsRowChangeEventHandler SkillsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillsRow(SkillsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow AddSkillsRow(
                        RelatedSkillsRow parentRelatedSkillsRowByRelatedSkills_Skills, 
                        double SourceActivationTime, 
                        bool SourceIsElite, 
                        double SourceEnergyCost, 
                        double SourceRechargeTime, 
                        double SourceUpkeepCost, 
                        double SourceAdrenalineCost, 
                        int CampaignRefId, 
                        int ProfessionRefId, 
                        int AttributeRefId, 
                        double SourceSacrificeCost, 
                        bool SourceCausesExhaustion, 
                        int TargetRefId, 
                        int RangeRefId, 
                        int SpecialTypeRefId, 
                        bool SourceIsPvEOnly, 
                        bool SourceHasPvP, 
                        int ProjectileRefId, 
                        int AreaOfEffectRefId, 
                        bool SourceIsPvP, 
                        int TypeRefId, 
                        string SourceWikiLink, 
                        bool IsRemoved, 
                        bool IsValid, 
                        int ImageRefId, 
                        int TemplateId) {
                SkillsRow rowSkillsRow = ((SkillsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SourceActivationTime,
                        SourceIsElite,
                        SourceEnergyCost,
                        SourceRechargeTime,
                        SourceUpkeepCost,
                        SourceAdrenalineCost,
                        CampaignRefId,
                        ProfessionRefId,
                        AttributeRefId,
                        SourceSacrificeCost,
                        SourceCausesExhaustion,
                        TargetRefId,
                        RangeRefId,
                        SpecialTypeRefId,
                        SourceIsPvEOnly,
                        SourceHasPvP,
                        ProjectileRefId,
                        AreaOfEffectRefId,
                        SourceIsPvP,
                        TypeRefId,
                        SourceWikiLink,
                        IsRemoved,
                        IsValid,
                        ImageRefId,
                        TemplateId};
                if ((parentRelatedSkillsRowByRelatedSkills_Skills != null)) {
                    columnValuesArray[0] = parentRelatedSkillsRowByRelatedSkills_Skills[1];
                }
                rowSkillsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillsRow);
                return rowSkillsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow FindById(int Id) {
                return ((SkillsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillsDataTable cln = ((SkillsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnSourceActivationTime = base.Columns["SourceActivationTime"];
                this.columnSourceIsElite = base.Columns["SourceIsElite"];
                this.columnSourceEnergyCost = base.Columns["SourceEnergyCost"];
                this.columnSourceRechargeTime = base.Columns["SourceRechargeTime"];
                this.columnSourceUpkeepCost = base.Columns["SourceUpkeepCost"];
                this.columnSourceAdrenalineCost = base.Columns["SourceAdrenalineCost"];
                this.columnCampaignRefId = base.Columns["CampaignRefId"];
                this.columnProfessionRefId = base.Columns["ProfessionRefId"];
                this.columnAttributeRefId = base.Columns["AttributeRefId"];
                this.columnSourceSacrificeCost = base.Columns["SourceSacrificeCost"];
                this.columnSourceCausesExhaustion = base.Columns["SourceCausesExhaustion"];
                this.columnTargetRefId = base.Columns["TargetRefId"];
                this.columnRangeRefId = base.Columns["RangeRefId"];
                this.columnSpecialTypeRefId = base.Columns["SpecialTypeRefId"];
                this.columnSourceIsPvEOnly = base.Columns["SourceIsPvEOnly"];
                this.columnSourceHasPvP = base.Columns["SourceHasPvP"];
                this.columnProjectileRefId = base.Columns["ProjectileRefId"];
                this.columnAreaOfEffectRefId = base.Columns["AreaOfEffectRefId"];
                this.columnSourceIsPvP = base.Columns["SourceIsPvP"];
                this.columnTypeRefId = base.Columns["TypeRefId"];
                this.columnSourceWikiLink = base.Columns["SourceWikiLink"];
                this.columnIsRemoved = base.Columns["IsRemoved"];
                this.columnIsValid = base.Columns["IsValid"];
                this.columnImageRefId = base.Columns["ImageRefId"];
                this.columnTemplateId = base.Columns["TemplateId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnSourceActivationTime = new global::System.Data.DataColumn("SourceActivationTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceActivationTime);
                this.columnSourceIsElite = new global::System.Data.DataColumn("SourceIsElite", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceIsElite);
                this.columnSourceEnergyCost = new global::System.Data.DataColumn("SourceEnergyCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceEnergyCost);
                this.columnSourceRechargeTime = new global::System.Data.DataColumn("SourceRechargeTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceRechargeTime);
                this.columnSourceUpkeepCost = new global::System.Data.DataColumn("SourceUpkeepCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceUpkeepCost);
                this.columnSourceAdrenalineCost = new global::System.Data.DataColumn("SourceAdrenalineCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceAdrenalineCost);
                this.columnCampaignRefId = new global::System.Data.DataColumn("CampaignRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCampaignRefId);
                this.columnProfessionRefId = new global::System.Data.DataColumn("ProfessionRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfessionRefId);
                this.columnAttributeRefId = new global::System.Data.DataColumn("AttributeRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttributeRefId);
                this.columnSourceSacrificeCost = new global::System.Data.DataColumn("SourceSacrificeCost", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceSacrificeCost);
                this.columnSourceCausesExhaustion = new global::System.Data.DataColumn("SourceCausesExhaustion", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceCausesExhaustion);
                this.columnTargetRefId = new global::System.Data.DataColumn("TargetRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTargetRefId);
                this.columnRangeRefId = new global::System.Data.DataColumn("RangeRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRangeRefId);
                this.columnSpecialTypeRefId = new global::System.Data.DataColumn("SpecialTypeRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialTypeRefId);
                this.columnSourceIsPvEOnly = new global::System.Data.DataColumn("SourceIsPvEOnly", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceIsPvEOnly);
                this.columnSourceHasPvP = new global::System.Data.DataColumn("SourceHasPvP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceHasPvP);
                this.columnProjectileRefId = new global::System.Data.DataColumn("ProjectileRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectileRefId);
                this.columnAreaOfEffectRefId = new global::System.Data.DataColumn("AreaOfEffectRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaOfEffectRefId);
                this.columnSourceIsPvP = new global::System.Data.DataColumn("SourceIsPvP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceIsPvP);
                this.columnTypeRefId = new global::System.Data.DataColumn("TypeRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeRefId);
                this.columnSourceWikiLink = new global::System.Data.DataColumn("SourceWikiLink", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceWikiLink);
                this.columnIsRemoved = new global::System.Data.DataColumn("IsRemoved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRemoved);
                this.columnIsValid = new global::System.Data.DataColumn("IsValid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValid);
                this.columnImageRefId = new global::System.Data.DataColumn("ImageRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageRefId);
                this.columnTemplateId = new global::System.Data.DataColumn("TemplateId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Skills", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnCampaignRefId.AllowDBNull = false;
                this.columnProfessionRefId.AllowDBNull = false;
                this.columnAttributeRefId.AllowDBNull = false;
                this.columnTargetRefId.AllowDBNull = false;
                this.columnRangeRefId.AllowDBNull = false;
                this.columnSpecialTypeRefId.AllowDBNull = false;
                this.columnProjectileRefId.AllowDBNull = false;
                this.columnAreaOfEffectRefId.AllowDBNull = false;
                this.columnTypeRefId.AllowDBNull = false;
                this.columnIsRemoved.AllowDBNull = false;
                this.columnIsValid.AllowDBNull = false;
                this.columnTemplateId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow NewSkillsRow() {
                return ((SkillsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillsRowChanged != null)) {
                    this.SkillsRowChanged(this, new SkillsRowChangeEvent(((SkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillsRowChanging != null)) {
                    this.SkillsRowChanging(this, new SkillsRowChangeEvent(((SkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillsRowDeleted != null)) {
                    this.SkillsRowDeleted(this, new SkillsRowChangeEvent(((SkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillsRowDeleting != null)) {
                    this.SkillsRowDeleting(this, new SkillsRowChangeEvent(((SkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillsRow(SkillsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillNameDataTable : global::System.Data.TypedTableBase<SkillNameRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnLocale;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameDataTable() {
                this.TableName = "SkillName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocaleColumn {
                get {
                    return this.columnLocale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow this[int index] {
                get {
                    return ((SkillNameRow)(this.Rows[index]));
                }
            }
            
            public event SkillNameRowChangeEventHandler SkillNameRowChanging;
            
            public event SkillNameRowChangeEventHandler SkillNameRowChanged;
            
            public event SkillNameRowChangeEventHandler SkillNameRowDeleting;
            
            public event SkillNameRowChangeEventHandler SkillNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillNameRow(SkillNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow AddSkillNameRow(SkillsRow parentSkillsRowByFK_Skills_SkillText, string Locale, string Name) {
                SkillNameRow rowSkillNameRow = ((SkillNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Locale,
                        Name};
                if ((parentSkillsRowByFK_Skills_SkillText != null)) {
                    columnValuesArray[0] = parentSkillsRowByFK_Skills_SkillText[0];
                }
                rowSkillNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillNameRow);
                return rowSkillNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow FindByIdLocale(int Id, string Locale) {
                return ((SkillNameRow)(this.Rows.Find(new object[] {
                            Id,
                            Locale})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillNameDataTable cln = ((SkillNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnLocale = base.Columns["Locale"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnLocale = new global::System.Data.DataColumn("Locale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocale);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_SkillText", new global::System.Data.DataColumn[] {
                                this.columnId,
                                this.columnLocale}, true));
                this.columnId.AllowDBNull = false;
                this.columnLocale.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow NewSkillNameRow() {
                return ((SkillNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillNameRowChanged != null)) {
                    this.SkillNameRowChanged(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillNameRowChanging != null)) {
                    this.SkillNameRowChanging(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillNameRowDeleted != null)) {
                    this.SkillNameRowDeleted(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillNameRowDeleting != null)) {
                    this.SkillNameRowDeleting(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillNameRow(SkillNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RemovesDataTable : global::System.Data.TypedTableBase<RemovesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemovesDataTable() {
                this.TableName = "Removes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemovesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RemovesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemovesRow this[int index] {
                get {
                    return ((RemovesRow)(this.Rows[index]));
                }
            }
            
            public event RemovesRowChangeEventHandler RemovesRowChanging;
            
            public event RemovesRowChangeEventHandler RemovesRowChanged;
            
            public event RemovesRowChangeEventHandler RemovesRowDeleting;
            
            public event RemovesRowChangeEventHandler RemovesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRemovesRow(RemovesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemovesRow AddRemovesRow(string Name) {
                RemovesRow rowRemovesRow = ((RemovesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowRemovesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRemovesRow);
                return rowRemovesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RemovesDataTable cln = ((RemovesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RemovesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Removes", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemovesRow NewRemovesRow() {
                return ((RemovesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RemovesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RemovesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RemovesRowChanged != null)) {
                    this.RemovesRowChanged(this, new RemovesRowChangeEvent(((RemovesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RemovesRowChanging != null)) {
                    this.RemovesRowChanging(this, new RemovesRowChangeEvent(((RemovesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RemovesRowDeleted != null)) {
                    this.RemovesRowDeleted(this, new RemovesRowChangeEvent(((RemovesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RemovesRowDeleting != null)) {
                    this.RemovesRowDeleting(this, new RemovesRowChangeEvent(((RemovesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRemovesRow(RemovesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RemovesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillsRemoves_LookupDataTable : global::System.Data.TypedTableBase<SkillsRemoves_LookupRow> {
            
            private global::System.Data.DataColumn columnSkillsId;
            
            private global::System.Data.DataColumn columnRemovesId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupDataTable() {
                this.TableName = "SkillsRemoves_Lookup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsRemoves_LookupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillsRemoves_LookupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillsIdColumn {
                get {
                    return this.columnSkillsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemovesIdColumn {
                get {
                    return this.columnRemovesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRow this[int index] {
                get {
                    return ((SkillsRemoves_LookupRow)(this.Rows[index]));
                }
            }
            
            public event SkillsRemoves_LookupRowChangeEventHandler SkillsRemoves_LookupRowChanging;
            
            public event SkillsRemoves_LookupRowChangeEventHandler SkillsRemoves_LookupRowChanged;
            
            public event SkillsRemoves_LookupRowChangeEventHandler SkillsRemoves_LookupRowDeleting;
            
            public event SkillsRemoves_LookupRowChangeEventHandler SkillsRemoves_LookupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillsRemoves_LookupRow(SkillsRemoves_LookupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRow AddSkillsRemoves_LookupRow(SkillsRow parentSkillsRowByFK_Skills_SkillsRemoves_Lookup, RemovesRow parentRemovesRowByFK_Removes_SkillsRemoves_Lookup) {
                SkillsRemoves_LookupRow rowSkillsRemoves_LookupRow = ((SkillsRemoves_LookupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentSkillsRowByFK_Skills_SkillsRemoves_Lookup != null)) {
                    columnValuesArray[0] = parentSkillsRowByFK_Skills_SkillsRemoves_Lookup[0];
                }
                if ((parentRemovesRowByFK_Removes_SkillsRemoves_Lookup != null)) {
                    columnValuesArray[1] = parentRemovesRowByFK_Removes_SkillsRemoves_Lookup[0];
                }
                rowSkillsRemoves_LookupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillsRemoves_LookupRow);
                return rowSkillsRemoves_LookupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRow FindBySkillsIdRemovesId(int SkillsId, int RemovesId) {
                return ((SkillsRemoves_LookupRow)(this.Rows.Find(new object[] {
                            SkillsId,
                            RemovesId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillsRemoves_LookupDataTable cln = ((SkillsRemoves_LookupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillsRemoves_LookupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSkillsId = base.Columns["SkillsId"];
                this.columnRemovesId = base.Columns["RemovesId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSkillsId = new global::System.Data.DataColumn("SkillsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillsId);
                this.columnRemovesId = new global::System.Data.DataColumn("RemovesId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemovesId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSkillsId,
                                this.columnRemovesId}, true));
                this.columnSkillsId.AllowDBNull = false;
                this.columnRemovesId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRow NewSkillsRemoves_LookupRow() {
                return ((SkillsRemoves_LookupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillsRemoves_LookupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillsRemoves_LookupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillsRemoves_LookupRowChanged != null)) {
                    this.SkillsRemoves_LookupRowChanged(this, new SkillsRemoves_LookupRowChangeEvent(((SkillsRemoves_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillsRemoves_LookupRowChanging != null)) {
                    this.SkillsRemoves_LookupRowChanging(this, new SkillsRemoves_LookupRowChangeEvent(((SkillsRemoves_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillsRemoves_LookupRowDeleted != null)) {
                    this.SkillsRemoves_LookupRowDeleted(this, new SkillsRemoves_LookupRowChangeEvent(((SkillsRemoves_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillsRemoves_LookupRowDeleting != null)) {
                    this.SkillsRemoves_LookupRowDeleting(this, new SkillsRemoves_LookupRowChangeEvent(((SkillsRemoves_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillsRemoves_LookupRow(SkillsRemoves_LookupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillsRemoves_LookupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CampaignsDataTable : global::System.Data.TypedTableBase<CampaignsRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsDataTable() {
                this.TableName = "Campaigns";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CampaignsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CampaignsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsRow this[int index] {
                get {
                    return ((CampaignsRow)(this.Rows[index]));
                }
            }
            
            public event CampaignsRowChangeEventHandler CampaignsRowChanging;
            
            public event CampaignsRowChangeEventHandler CampaignsRowChanged;
            
            public event CampaignsRowChangeEventHandler CampaignsRowDeleting;
            
            public event CampaignsRowChangeEventHandler CampaignsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCampaignsRow(CampaignsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsRow AddCampaignsRow(string Name) {
                CampaignsRow rowCampaignsRow = ((CampaignsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowCampaignsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCampaignsRow);
                return rowCampaignsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsRow FindById(int Id) {
                return ((CampaignsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CampaignsDataTable cln = ((CampaignsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CampaignsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Campaigns", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsRow NewCampaignsRow() {
                return ((CampaignsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CampaignsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CampaignsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CampaignsRowChanged != null)) {
                    this.CampaignsRowChanged(this, new CampaignsRowChangeEvent(((CampaignsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CampaignsRowChanging != null)) {
                    this.CampaignsRowChanging(this, new CampaignsRowChangeEvent(((CampaignsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CampaignsRowDeleted != null)) {
                    this.CampaignsRowDeleted(this, new CampaignsRowChangeEvent(((CampaignsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CampaignsRowDeleting != null)) {
                    this.CampaignsRowDeleting(this, new CampaignsRowChangeEvent(((CampaignsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCampaignsRow(CampaignsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CampaignsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillTypesDataTable : global::System.Data.TypedTableBase<SkillTypesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnParentTypeId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesDataTable() {
                this.TableName = "SkillTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentTypeIdColumn {
                get {
                    return this.columnParentTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow this[int index] {
                get {
                    return ((SkillTypesRow)(this.Rows[index]));
                }
            }
            
            public event SkillTypesRowChangeEventHandler SkillTypesRowChanging;
            
            public event SkillTypesRowChangeEventHandler SkillTypesRowChanged;
            
            public event SkillTypesRowChangeEventHandler SkillTypesRowDeleting;
            
            public event SkillTypesRowChangeEventHandler SkillTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillTypesRow(SkillTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow AddSkillTypesRow(string Name, int ParentTypeId) {
                SkillTypesRow rowSkillTypesRow = ((SkillTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        ParentTypeId};
                rowSkillTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillTypesRow);
                return rowSkillTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow FindById(int Id) {
                return ((SkillTypesRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillTypesDataTable cln = ((SkillTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnParentTypeId = base.Columns["ParentTypeId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnParentTypeId = new global::System.Data.DataColumn("ParentTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentTypeId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow NewSkillTypesRow() {
                return ((SkillTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillTypesRowChanged != null)) {
                    this.SkillTypesRowChanged(this, new SkillTypesRowChangeEvent(((SkillTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillTypesRowChanging != null)) {
                    this.SkillTypesRowChanging(this, new SkillTypesRowChangeEvent(((SkillTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillTypesRowDeleted != null)) {
                    this.SkillTypesRowDeleted(this, new SkillTypesRowChangeEvent(((SkillTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillTypesRowDeleting != null)) {
                    this.SkillTypesRowDeleting(this, new SkillTypesRowChangeEvent(((SkillTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillTypesRow(SkillTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SpecialTypesDataTable : global::System.Data.TypedTableBase<SpecialTypesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesDataTable() {
                this.TableName = "SpecialTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpecialTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SpecialTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesRow this[int index] {
                get {
                    return ((SpecialTypesRow)(this.Rows[index]));
                }
            }
            
            public event SpecialTypesRowChangeEventHandler SpecialTypesRowChanging;
            
            public event SpecialTypesRowChangeEventHandler SpecialTypesRowChanged;
            
            public event SpecialTypesRowChangeEventHandler SpecialTypesRowDeleting;
            
            public event SpecialTypesRowChangeEventHandler SpecialTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSpecialTypesRow(SpecialTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesRow AddSpecialTypesRow(string Name) {
                SpecialTypesRow rowSpecialTypesRow = ((SpecialTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowSpecialTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSpecialTypesRow);
                return rowSpecialTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesRow FindById(int Id) {
                return ((SpecialTypesRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SpecialTypesDataTable cln = ((SpecialTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SpecialTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesRow NewSpecialTypesRow() {
                return ((SpecialTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SpecialTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SpecialTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SpecialTypesRowChanged != null)) {
                    this.SpecialTypesRowChanged(this, new SpecialTypesRowChangeEvent(((SpecialTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SpecialTypesRowChanging != null)) {
                    this.SpecialTypesRowChanging(this, new SpecialTypesRowChangeEvent(((SpecialTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SpecialTypesRowDeleted != null)) {
                    this.SpecialTypesRowDeleted(this, new SpecialTypesRowChangeEvent(((SpecialTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SpecialTypesRowDeleting != null)) {
                    this.SpecialTypesRowDeleting(this, new SpecialTypesRowChangeEvent(((SpecialTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSpecialTypesRow(SpecialTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SpecialTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RangesDataTable : global::System.Data.TypedTableBase<RangesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RangesDataTable() {
                this.TableName = "Ranges";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RangesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RangesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RangesRow this[int index] {
                get {
                    return ((RangesRow)(this.Rows[index]));
                }
            }
            
            public event RangesRowChangeEventHandler RangesRowChanging;
            
            public event RangesRowChangeEventHandler RangesRowChanged;
            
            public event RangesRowChangeEventHandler RangesRowDeleting;
            
            public event RangesRowChangeEventHandler RangesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRangesRow(RangesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RangesRow AddRangesRow(string Name) {
                RangesRow rowRangesRow = ((RangesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowRangesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRangesRow);
                return rowRangesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RangesDataTable cln = ((RangesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RangesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RangesRow NewRangesRow() {
                return ((RangesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RangesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RangesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RangesRowChanged != null)) {
                    this.RangesRowChanged(this, new RangesRowChangeEvent(((RangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RangesRowChanging != null)) {
                    this.RangesRowChanging(this, new RangesRowChangeEvent(((RangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RangesRowDeleted != null)) {
                    this.RangesRowDeleted(this, new RangesRowChangeEvent(((RangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RangesRowDeleting != null)) {
                    this.RangesRowDeleting(this, new RangesRowChangeEvent(((RangesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRangesRow(RangesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RangesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AreaOfEffectsDataTable : global::System.Data.TypedTableBase<AreaOfEffectsRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsDataTable() {
                this.TableName = "AreaOfEffects";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AreaOfEffectsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AreaOfEffectsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsRow this[int index] {
                get {
                    return ((AreaOfEffectsRow)(this.Rows[index]));
                }
            }
            
            public event AreaOfEffectsRowChangeEventHandler AreaOfEffectsRowChanging;
            
            public event AreaOfEffectsRowChangeEventHandler AreaOfEffectsRowChanged;
            
            public event AreaOfEffectsRowChangeEventHandler AreaOfEffectsRowDeleting;
            
            public event AreaOfEffectsRowChangeEventHandler AreaOfEffectsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAreaOfEffectsRow(AreaOfEffectsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsRow AddAreaOfEffectsRow(string Name) {
                AreaOfEffectsRow rowAreaOfEffectsRow = ((AreaOfEffectsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowAreaOfEffectsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAreaOfEffectsRow);
                return rowAreaOfEffectsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsRow FindById(int Id) {
                return ((AreaOfEffectsRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AreaOfEffectsDataTable cln = ((AreaOfEffectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AreaOfEffectsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsRow NewAreaOfEffectsRow() {
                return ((AreaOfEffectsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AreaOfEffectsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AreaOfEffectsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AreaOfEffectsRowChanged != null)) {
                    this.AreaOfEffectsRowChanged(this, new AreaOfEffectsRowChangeEvent(((AreaOfEffectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AreaOfEffectsRowChanging != null)) {
                    this.AreaOfEffectsRowChanging(this, new AreaOfEffectsRowChangeEvent(((AreaOfEffectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AreaOfEffectsRowDeleted != null)) {
                    this.AreaOfEffectsRowDeleted(this, new AreaOfEffectsRowChangeEvent(((AreaOfEffectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AreaOfEffectsRowDeleting != null)) {
                    this.AreaOfEffectsRowDeleting(this, new AreaOfEffectsRowChangeEvent(((AreaOfEffectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAreaOfEffectsRow(AreaOfEffectsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AreaOfEffectsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AttributesDataTable : global::System.Data.TypedTableBase<AttributesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnTemplateId;
            
            private global::System.Data.DataColumn columnIsPrimaryOnly;
            
            private global::System.Data.DataColumn columnProfessionRefId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesDataTable() {
                this.TableName = "Attributes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttributesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AttributesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIdColumn {
                get {
                    return this.columnTemplateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPrimaryOnlyColumn {
                get {
                    return this.columnIsPrimaryOnly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfessionRefIdColumn {
                get {
                    return this.columnProfessionRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesRow this[int index] {
                get {
                    return ((AttributesRow)(this.Rows[index]));
                }
            }
            
            public event AttributesRowChangeEventHandler AttributesRowChanging;
            
            public event AttributesRowChangeEventHandler AttributesRowChanged;
            
            public event AttributesRowChangeEventHandler AttributesRowDeleting;
            
            public event AttributesRowChangeEventHandler AttributesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAttributesRow(AttributesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesRow AddAttributesRow(string Name, int TemplateId, bool IsPrimaryOnly, int ProfessionRefId) {
                AttributesRow rowAttributesRow = ((AttributesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        TemplateId,
                        IsPrimaryOnly,
                        ProfessionRefId};
                rowAttributesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAttributesRow);
                return rowAttributesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AttributesDataTable cln = ((AttributesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AttributesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnTemplateId = base.Columns["TemplateId"];
                this.columnIsPrimaryOnly = base.Columns["IsPrimaryOnly"];
                this.columnProfessionRefId = base.Columns["ProfessionRefId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTemplateId = new global::System.Data.DataColumn("TemplateId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateId);
                this.columnIsPrimaryOnly = new global::System.Data.DataColumn("IsPrimaryOnly", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrimaryOnly);
                this.columnProfessionRefId = new global::System.Data.DataColumn("ProfessionRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfessionRefId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesRow NewAttributesRow() {
                return ((AttributesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AttributesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AttributesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AttributesRowChanged != null)) {
                    this.AttributesRowChanged(this, new AttributesRowChangeEvent(((AttributesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AttributesRowChanging != null)) {
                    this.AttributesRowChanging(this, new AttributesRowChangeEvent(((AttributesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AttributesRowDeleted != null)) {
                    this.AttributesRowDeleted(this, new AttributesRowChangeEvent(((AttributesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AttributesRowDeleting != null)) {
                    this.AttributesRowDeleting(this, new AttributesRowChangeEvent(((AttributesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAttributesRow(AttributesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AttributesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProfessionsDataTable : global::System.Data.TypedTableBase<ProfessionsRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnTemplateId;
            
            private global::System.Data.DataColumn columnImageRefId;
            
            private global::System.Data.DataColumn columnIsValidPrimary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsDataTable() {
                this.TableName = "Professions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProfessionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProfessionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIdColumn {
                get {
                    return this.columnTemplateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageRefIdColumn {
                get {
                    return this.columnImageRefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsValidPrimaryColumn {
                get {
                    return this.columnIsValidPrimary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRow this[int index] {
                get {
                    return ((ProfessionsRow)(this.Rows[index]));
                }
            }
            
            public event ProfessionsRowChangeEventHandler ProfessionsRowChanging;
            
            public event ProfessionsRowChangeEventHandler ProfessionsRowChanged;
            
            public event ProfessionsRowChangeEventHandler ProfessionsRowDeleting;
            
            public event ProfessionsRowChangeEventHandler ProfessionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProfessionsRow(ProfessionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRow AddProfessionsRow(string Name, int TemplateId, int ImageRefId, bool IsValidPrimary) {
                ProfessionsRow rowProfessionsRow = ((ProfessionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        TemplateId,
                        ImageRefId,
                        IsValidPrimary};
                rowProfessionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProfessionsRow);
                return rowProfessionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProfessionsDataTable cln = ((ProfessionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProfessionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
                this.columnTemplateId = base.Columns["TemplateId"];
                this.columnImageRefId = base.Columns["ImageRefId"];
                this.columnIsValidPrimary = base.Columns["IsValidPrimary"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTemplateId = new global::System.Data.DataColumn("TemplateId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateId);
                this.columnImageRefId = new global::System.Data.DataColumn("ImageRefId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageRefId);
                this.columnIsValidPrimary = new global::System.Data.DataColumn("IsValidPrimary", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsValidPrimary);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnIsValidPrimary.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRow NewProfessionsRow() {
                return ((ProfessionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProfessionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProfessionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProfessionsRowChanged != null)) {
                    this.ProfessionsRowChanged(this, new ProfessionsRowChangeEvent(((ProfessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProfessionsRowChanging != null)) {
                    this.ProfessionsRowChanging(this, new ProfessionsRowChangeEvent(((ProfessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProfessionsRowDeleted != null)) {
                    this.ProfessionsRowDeleted(this, new ProfessionsRowChangeEvent(((ProfessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProfessionsRowDeleting != null)) {
                    this.ProfessionsRowDeleting(this, new ProfessionsRowChangeEvent(((ProfessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProfessionsRow(ProfessionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProfessionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TargetsDataTable : global::System.Data.TypedTableBase<TargetsRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetsDataTable() {
                this.TableName = "Targets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TargetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetsRow this[int index] {
                get {
                    return ((TargetsRow)(this.Rows[index]));
                }
            }
            
            public event TargetsRowChangeEventHandler TargetsRowChanging;
            
            public event TargetsRowChangeEventHandler TargetsRowChanged;
            
            public event TargetsRowChangeEventHandler TargetsRowDeleting;
            
            public event TargetsRowChangeEventHandler TargetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTargetsRow(TargetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetsRow AddTargetsRow(string Name) {
                TargetsRow rowTargetsRow = ((TargetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowTargetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTargetsRow);
                return rowTargetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TargetsDataTable cln = ((TargetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TargetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetsRow NewTargetsRow() {
                return ((TargetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TargetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TargetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TargetsRowChanged != null)) {
                    this.TargetsRowChanged(this, new TargetsRowChangeEvent(((TargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TargetsRowChanging != null)) {
                    this.TargetsRowChanging(this, new TargetsRowChangeEvent(((TargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TargetsRowDeleted != null)) {
                    this.TargetsRowDeleted(this, new TargetsRowChangeEvent(((TargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TargetsRowDeleting != null)) {
                    this.TargetsRowDeleting(this, new TargetsRowChangeEvent(((TargetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTargetsRow(TargetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TargetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectilesDataTable : global::System.Data.TypedTableBase<ProjectilesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectilesDataTable() {
                this.TableName = "Projectiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectilesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectilesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectilesRow this[int index] {
                get {
                    return ((ProjectilesRow)(this.Rows[index]));
                }
            }
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowChanging;
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowChanged;
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowDeleting;
            
            public event ProjectilesRowChangeEventHandler ProjectilesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectilesRow(ProjectilesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectilesRow AddProjectilesRow(string Name) {
                ProjectilesRow rowProjectilesRow = ((ProjectilesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowProjectilesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectilesRow);
                return rowProjectilesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectilesDataTable cln = ((ProjectilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectilesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectilesRow NewProjectilesRow() {
                return ((ProjectilesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectilesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectilesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectilesRowChanged != null)) {
                    this.ProjectilesRowChanged(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectilesRowChanging != null)) {
                    this.ProjectilesRowChanging(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectilesRowDeleted != null)) {
                    this.ProjectilesRowDeleted(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectilesRowDeleting != null)) {
                    this.ProjectilesRowDeleting(this, new ProjectilesRowChangeEvent(((ProjectilesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectilesRow(ProjectilesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CausesDataTable : global::System.Data.TypedTableBase<CausesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CausesDataTable() {
                this.TableName = "Causes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CausesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CausesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CausesRow this[int index] {
                get {
                    return ((CausesRow)(this.Rows[index]));
                }
            }
            
            public event CausesRowChangeEventHandler CausesRowChanging;
            
            public event CausesRowChangeEventHandler CausesRowChanged;
            
            public event CausesRowChangeEventHandler CausesRowDeleting;
            
            public event CausesRowChangeEventHandler CausesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCausesRow(CausesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CausesRow AddCausesRow(string Name) {
                CausesRow rowCausesRow = ((CausesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowCausesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCausesRow);
                return rowCausesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CausesDataTable cln = ((CausesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CausesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CausesRow NewCausesRow() {
                return ((CausesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CausesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CausesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CausesRowChanged != null)) {
                    this.CausesRowChanged(this, new CausesRowChangeEvent(((CausesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CausesRowChanging != null)) {
                    this.CausesRowChanging(this, new CausesRowChangeEvent(((CausesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CausesRowDeleted != null)) {
                    this.CausesRowDeleted(this, new CausesRowChangeEvent(((CausesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CausesRowDeleting != null)) {
                    this.CausesRowDeleting(this, new CausesRowChangeEvent(((CausesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCausesRow(CausesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CausesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillsCauses_LookupDataTable : global::System.Data.TypedTableBase<SkillsCauses_LookupRow> {
            
            private global::System.Data.DataColumn columnSkillsId;
            
            private global::System.Data.DataColumn columnCausesId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupDataTable() {
                this.TableName = "SkillsCauses_Lookup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsCauses_LookupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillsCauses_LookupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillsIdColumn {
                get {
                    return this.columnSkillsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CausesIdColumn {
                get {
                    return this.columnCausesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRow this[int index] {
                get {
                    return ((SkillsCauses_LookupRow)(this.Rows[index]));
                }
            }
            
            public event SkillsCauses_LookupRowChangeEventHandler SkillsCauses_LookupRowChanging;
            
            public event SkillsCauses_LookupRowChangeEventHandler SkillsCauses_LookupRowChanged;
            
            public event SkillsCauses_LookupRowChangeEventHandler SkillsCauses_LookupRowDeleting;
            
            public event SkillsCauses_LookupRowChangeEventHandler SkillsCauses_LookupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillsCauses_LookupRow(SkillsCauses_LookupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRow AddSkillsCauses_LookupRow(SkillsRow parentSkillsRowByFK_Skills_SkillsCauses_Lookup, CausesRow parentCausesRowByFK_Causes_SkillsCauses_Lookup) {
                SkillsCauses_LookupRow rowSkillsCauses_LookupRow = ((SkillsCauses_LookupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentSkillsRowByFK_Skills_SkillsCauses_Lookup != null)) {
                    columnValuesArray[0] = parentSkillsRowByFK_Skills_SkillsCauses_Lookup[0];
                }
                if ((parentCausesRowByFK_Causes_SkillsCauses_Lookup != null)) {
                    columnValuesArray[1] = parentCausesRowByFK_Causes_SkillsCauses_Lookup[0];
                }
                rowSkillsCauses_LookupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillsCauses_LookupRow);
                return rowSkillsCauses_LookupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRow FindBySkillsIdCausesId(int SkillsId, int CausesId) {
                return ((SkillsCauses_LookupRow)(this.Rows.Find(new object[] {
                            SkillsId,
                            CausesId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillsCauses_LookupDataTable cln = ((SkillsCauses_LookupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillsCauses_LookupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSkillsId = base.Columns["SkillsId"];
                this.columnCausesId = base.Columns["CausesId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSkillsId = new global::System.Data.DataColumn("SkillsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillsId);
                this.columnCausesId = new global::System.Data.DataColumn("CausesId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCausesId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSkillsId,
                                this.columnCausesId}, true));
                this.columnSkillsId.AllowDBNull = false;
                this.columnCausesId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRow NewSkillsCauses_LookupRow() {
                return ((SkillsCauses_LookupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillsCauses_LookupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillsCauses_LookupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillsCauses_LookupRowChanged != null)) {
                    this.SkillsCauses_LookupRowChanged(this, new SkillsCauses_LookupRowChangeEvent(((SkillsCauses_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillsCauses_LookupRowChanging != null)) {
                    this.SkillsCauses_LookupRowChanging(this, new SkillsCauses_LookupRowChangeEvent(((SkillsCauses_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillsCauses_LookupRowDeleted != null)) {
                    this.SkillsCauses_LookupRowDeleted(this, new SkillsCauses_LookupRowChangeEvent(((SkillsCauses_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillsCauses_LookupRowDeleting != null)) {
                    this.SkillsCauses_LookupRowDeleting(this, new SkillsCauses_LookupRowChangeEvent(((SkillsCauses_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillsCauses_LookupRow(SkillsCauses_LookupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillsCauses_LookupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CategoriesDataTable : global::System.Data.TypedTableBase<CategoriesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesDataTable() {
                this.TableName = "Categories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CategoriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow this[int index] {
                get {
                    return ((CategoriesRow)(this.Rows[index]));
                }
            }
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanging;
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanged;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleting;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategoriesRow(CategoriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow AddCategoriesRow(string Name) {
                CategoriesRow rowCategoriesRow = ((CategoriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name};
                rowCategoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategoriesRow);
                return rowCategoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CategoriesDataTable cln = ((CategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CategoriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, false));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow NewCategoriesRow() {
                return ((CategoriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CategoriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CategoriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoriesRowChanged != null)) {
                    this.CategoriesRowChanged(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoriesRowChanging != null)) {
                    this.CategoriesRowChanging(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoriesRowDeleted != null)) {
                    this.CategoriesRowDeleted(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoriesRowDeleting != null)) {
                    this.CategoriesRowDeleting(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategoriesRow(CategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillsCategories_LookupDataTable : global::System.Data.TypedTableBase<SkillsCategories_LookupRow> {
            
            private global::System.Data.DataColumn columnSkillsId;
            
            private global::System.Data.DataColumn columnCategoriesId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupDataTable() {
                this.TableName = "SkillsCategories_Lookup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsCategories_LookupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillsCategories_LookupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillsIdColumn {
                get {
                    return this.columnSkillsId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoriesIdColumn {
                get {
                    return this.columnCategoriesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRow this[int index] {
                get {
                    return ((SkillsCategories_LookupRow)(this.Rows[index]));
                }
            }
            
            public event SkillsCategories_LookupRowChangeEventHandler SkillsCategories_LookupRowChanging;
            
            public event SkillsCategories_LookupRowChangeEventHandler SkillsCategories_LookupRowChanged;
            
            public event SkillsCategories_LookupRowChangeEventHandler SkillsCategories_LookupRowDeleting;
            
            public event SkillsCategories_LookupRowChangeEventHandler SkillsCategories_LookupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillsCategories_LookupRow(SkillsCategories_LookupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRow AddSkillsCategories_LookupRow(SkillsRow parentSkillsRowBySkills_SkillsCategories_Lookup, CategoriesRow parentCategoriesRowByCategories_SkillsCategories_Lookup) {
                SkillsCategories_LookupRow rowSkillsCategories_LookupRow = ((SkillsCategories_LookupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentSkillsRowBySkills_SkillsCategories_Lookup != null)) {
                    columnValuesArray[0] = parentSkillsRowBySkills_SkillsCategories_Lookup[0];
                }
                if ((parentCategoriesRowByCategories_SkillsCategories_Lookup != null)) {
                    columnValuesArray[1] = parentCategoriesRowByCategories_SkillsCategories_Lookup[0];
                }
                rowSkillsCategories_LookupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillsCategories_LookupRow);
                return rowSkillsCategories_LookupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRow FindBySkillsIdCategoriesId(int SkillsId, int CategoriesId) {
                return ((SkillsCategories_LookupRow)(this.Rows.Find(new object[] {
                            SkillsId,
                            CategoriesId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillsCategories_LookupDataTable cln = ((SkillsCategories_LookupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillsCategories_LookupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSkillsId = base.Columns["SkillsId"];
                this.columnCategoriesId = base.Columns["CategoriesId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSkillsId = new global::System.Data.DataColumn("SkillsId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillsId);
                this.columnCategoriesId = new global::System.Data.DataColumn("CategoriesId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoriesId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSkillsId,
                                this.columnCategoriesId}, true));
                this.columnSkillsId.AllowDBNull = false;
                this.columnCategoriesId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRow NewSkillsCategories_LookupRow() {
                return ((SkillsCategories_LookupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillsCategories_LookupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillsCategories_LookupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillsCategories_LookupRowChanged != null)) {
                    this.SkillsCategories_LookupRowChanged(this, new SkillsCategories_LookupRowChangeEvent(((SkillsCategories_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillsCategories_LookupRowChanging != null)) {
                    this.SkillsCategories_LookupRowChanging(this, new SkillsCategories_LookupRowChangeEvent(((SkillsCategories_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillsCategories_LookupRowDeleted != null)) {
                    this.SkillsCategories_LookupRowDeleted(this, new SkillsCategories_LookupRowChangeEvent(((SkillsCategories_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillsCategories_LookupRowDeleting != null)) {
                    this.SkillsCategories_LookupRowDeleting(this, new SkillsCategories_LookupRowChangeEvent(((SkillsCategories_LookupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillsCategories_LookupRow(SkillsCategories_LookupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillsCategories_LookupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RelatedSkillsDataTable : global::System.Data.TypedTableBase<RelatedSkillsRow> {
            
            private global::System.Data.DataColumn columnParentSkillId;
            
            private global::System.Data.DataColumn columnRelatedSkillId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsDataTable() {
                this.TableName = "RelatedSkills";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RelatedSkillsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RelatedSkillsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentSkillIdColumn {
                get {
                    return this.columnParentSkillId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelatedSkillIdColumn {
                get {
                    return this.columnRelatedSkillId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRow this[int index] {
                get {
                    return ((RelatedSkillsRow)(this.Rows[index]));
                }
            }
            
            public event RelatedSkillsRowChangeEventHandler RelatedSkillsRowChanging;
            
            public event RelatedSkillsRowChangeEventHandler RelatedSkillsRowChanged;
            
            public event RelatedSkillsRowChangeEventHandler RelatedSkillsRowDeleting;
            
            public event RelatedSkillsRowChangeEventHandler RelatedSkillsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRelatedSkillsRow(RelatedSkillsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRow AddRelatedSkillsRow(SkillsRow parentSkillsRowBySkills_RelatedSkills, int RelatedSkillId) {
                RelatedSkillsRow rowRelatedSkillsRow = ((RelatedSkillsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RelatedSkillId};
                if ((parentSkillsRowBySkills_RelatedSkills != null)) {
                    columnValuesArray[0] = parentSkillsRowBySkills_RelatedSkills[0];
                }
                rowRelatedSkillsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRelatedSkillsRow);
                return rowRelatedSkillsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRow FindByParentSkillIdRelatedSkillId(int ParentSkillId, int RelatedSkillId) {
                return ((RelatedSkillsRow)(this.Rows.Find(new object[] {
                            ParentSkillId,
                            RelatedSkillId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RelatedSkillsDataTable cln = ((RelatedSkillsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RelatedSkillsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParentSkillId = base.Columns["ParentSkillId"];
                this.columnRelatedSkillId = base.Columns["RelatedSkillId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParentSkillId = new global::System.Data.DataColumn("ParentSkillId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentSkillId);
                this.columnRelatedSkillId = new global::System.Data.DataColumn("RelatedSkillId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelatedSkillId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnParentSkillId,
                                this.columnRelatedSkillId}, true));
                this.columnParentSkillId.AllowDBNull = false;
                this.columnRelatedSkillId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRow NewRelatedSkillsRow() {
                return ((RelatedSkillsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RelatedSkillsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RelatedSkillsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RelatedSkillsRowChanged != null)) {
                    this.RelatedSkillsRowChanged(this, new RelatedSkillsRowChangeEvent(((RelatedSkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RelatedSkillsRowChanging != null)) {
                    this.RelatedSkillsRowChanging(this, new RelatedSkillsRowChangeEvent(((RelatedSkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RelatedSkillsRowDeleted != null)) {
                    this.RelatedSkillsRowDeleted(this, new RelatedSkillsRowChangeEvent(((RelatedSkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RelatedSkillsRowDeleting != null)) {
                    this.RelatedSkillsRowDeleting(this, new RelatedSkillsRowChangeEvent(((RelatedSkillsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRelatedSkillsRow(RelatedSkillsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RelatedSkillsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImagesDataTable : global::System.Data.TypedTableBase<ImagesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesDataTable() {
                this.TableName = "Images";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow this[int index] {
                get {
                    return ((ImagesRow)(this.Rows[index]));
                }
            }
            
            public event ImagesRowChangeEventHandler ImagesRowChanging;
            
            public event ImagesRowChangeEventHandler ImagesRowChanged;
            
            public event ImagesRowChangeEventHandler ImagesRowDeleting;
            
            public event ImagesRowChangeEventHandler ImagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImagesRow(ImagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow AddImagesRow(byte[] Data) {
                ImagesRow rowImagesRow = ((ImagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Data};
                rowImagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowImagesRow);
                return rowImagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow FindById(int Id) {
                return ((ImagesRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ImagesDataTable cln = ((ImagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ImagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnData = base.Columns["Data"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = 1;
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnData.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow NewImagesRow() {
                return ((ImagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ImagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ImagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagesRowChanged != null)) {
                    this.ImagesRowChanged(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagesRowChanging != null)) {
                    this.ImagesRowChanging(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagesRowDeleted != null)) {
                    this.ImagesRowDeleted(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagesRowDeleting != null)) {
                    this.ImagesRowDeleting(this, new ImagesRowChangeEvent(((ImagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImagesRow(ImagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillDescriptionDataTable : global::System.Data.TypedTableBase<SkillDescriptionRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnLocale;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnConciseDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionDataTable() {
                this.TableName = "SkillDescription";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillDescriptionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillDescriptionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocaleColumn {
                get {
                    return this.columnLocale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConciseDescriptionColumn {
                get {
                    return this.columnConciseDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionRow this[int index] {
                get {
                    return ((SkillDescriptionRow)(this.Rows[index]));
                }
            }
            
            public event SkillDescriptionRowChangeEventHandler SkillDescriptionRowChanging;
            
            public event SkillDescriptionRowChangeEventHandler SkillDescriptionRowChanged;
            
            public event SkillDescriptionRowChangeEventHandler SkillDescriptionRowDeleting;
            
            public event SkillDescriptionRowChangeEventHandler SkillDescriptionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillDescriptionRow(SkillDescriptionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionRow AddSkillDescriptionRow(SkillsRow parentSkillsRowBySkills_SkillDescription, string Locale, string Description, string ConciseDescription) {
                SkillDescriptionRow rowSkillDescriptionRow = ((SkillDescriptionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Locale,
                        Description,
                        ConciseDescription};
                if ((parentSkillsRowBySkills_SkillDescription != null)) {
                    columnValuesArray[0] = parentSkillsRowBySkills_SkillDescription[0];
                }
                rowSkillDescriptionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillDescriptionRow);
                return rowSkillDescriptionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionRow FindByIdLocale(int Id, string Locale) {
                return ((SkillDescriptionRow)(this.Rows.Find(new object[] {
                            Id,
                            Locale})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillDescriptionDataTable cln = ((SkillDescriptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillDescriptionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnLocale = base.Columns["Locale"];
                this.columnDescription = base.Columns["Description"];
                this.columnConciseDescription = base.Columns["ConciseDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnLocale = new global::System.Data.DataColumn("Locale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocale);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnConciseDescription = new global::System.Data.DataColumn("ConciseDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConciseDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_SkillText", new global::System.Data.DataColumn[] {
                                this.columnId,
                                this.columnLocale}, true));
                this.columnId.AllowDBNull = false;
                this.columnLocale.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionRow NewSkillDescriptionRow() {
                return ((SkillDescriptionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillDescriptionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillDescriptionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillDescriptionRowChanged != null)) {
                    this.SkillDescriptionRowChanged(this, new SkillDescriptionRowChangeEvent(((SkillDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillDescriptionRowChanging != null)) {
                    this.SkillDescriptionRowChanging(this, new SkillDescriptionRowChangeEvent(((SkillDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillDescriptionRowDeleted != null)) {
                    this.SkillDescriptionRowDeleted(this, new SkillDescriptionRowChangeEvent(((SkillDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillDescriptionRowDeleting != null)) {
                    this.SkillDescriptionRowDeleting(this, new SkillDescriptionRowChangeEvent(((SkillDescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillDescriptionRow(SkillDescriptionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Model ds = new Model();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillDescriptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillsRow : global::System.Data.DataRow {
            
            private SkillsDataTable tableSkills;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkills = ((SkillsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableSkills.IdColumn]));
                }
                set {
                    this[this.tableSkills.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SourceActivationTime {
                get {
                    try {
                        return ((double)(this[this.tableSkills.SourceActivationTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceActivationTime\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceActivationTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SourceIsElite {
                get {
                    try {
                        return ((bool)(this[this.tableSkills.SourceIsEliteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceIsElite\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceIsEliteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SourceEnergyCost {
                get {
                    try {
                        return ((double)(this[this.tableSkills.SourceEnergyCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceEnergyCost\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceEnergyCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SourceRechargeTime {
                get {
                    try {
                        return ((double)(this[this.tableSkills.SourceRechargeTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceRechargeTime\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceRechargeTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SourceUpkeepCost {
                get {
                    try {
                        return ((double)(this[this.tableSkills.SourceUpkeepCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceUpkeepCost\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceUpkeepCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SourceAdrenalineCost {
                get {
                    try {
                        return ((double)(this[this.tableSkills.SourceAdrenalineCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceAdrenalineCost\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceAdrenalineCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CampaignRefId {
                get {
                    return ((int)(this[this.tableSkills.CampaignRefIdColumn]));
                }
                set {
                    this[this.tableSkills.CampaignRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProfessionRefId {
                get {
                    return ((int)(this[this.tableSkills.ProfessionRefIdColumn]));
                }
                set {
                    this[this.tableSkills.ProfessionRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AttributeRefId {
                get {
                    return ((int)(this[this.tableSkills.AttributeRefIdColumn]));
                }
                set {
                    this[this.tableSkills.AttributeRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SourceSacrificeCost {
                get {
                    try {
                        return ((double)(this[this.tableSkills.SourceSacrificeCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceSacrificeCost\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceSacrificeCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SourceCausesExhaustion {
                get {
                    try {
                        return ((bool)(this[this.tableSkills.SourceCausesExhaustionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceCausesExhaustion\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceCausesExhaustionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TargetRefId {
                get {
                    return ((int)(this[this.tableSkills.TargetRefIdColumn]));
                }
                set {
                    this[this.tableSkills.TargetRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RangeRefId {
                get {
                    return ((int)(this[this.tableSkills.RangeRefIdColumn]));
                }
                set {
                    this[this.tableSkills.RangeRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SpecialTypeRefId {
                get {
                    return ((int)(this[this.tableSkills.SpecialTypeRefIdColumn]));
                }
                set {
                    this[this.tableSkills.SpecialTypeRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SourceIsPvEOnly {
                get {
                    try {
                        return ((bool)(this[this.tableSkills.SourceIsPvEOnlyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceIsPvEOnly\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceIsPvEOnlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SourceHasPvP {
                get {
                    try {
                        return ((bool)(this[this.tableSkills.SourceHasPvPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceHasPvP\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceHasPvPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectileRefId {
                get {
                    return ((int)(this[this.tableSkills.ProjectileRefIdColumn]));
                }
                set {
                    this[this.tableSkills.ProjectileRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AreaOfEffectRefId {
                get {
                    return ((int)(this[this.tableSkills.AreaOfEffectRefIdColumn]));
                }
                set {
                    this[this.tableSkills.AreaOfEffectRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SourceIsPvP {
                get {
                    try {
                        return ((bool)(this[this.tableSkills.SourceIsPvPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceIsPvP\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceIsPvPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeRefId {
                get {
                    return ((int)(this[this.tableSkills.TypeRefIdColumn]));
                }
                set {
                    this[this.tableSkills.TypeRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceWikiLink {
                get {
                    try {
                        return ((string)(this[this.tableSkills.SourceWikiLinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceWikiLink\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.SourceWikiLinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemoved {
                get {
                    return ((bool)(this[this.tableSkills.IsRemovedColumn]));
                }
                set {
                    this[this.tableSkills.IsRemovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValid {
                get {
                    return ((bool)(this[this.tableSkills.IsValidColumn]));
                }
                set {
                    this[this.tableSkills.IsValidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageRefId {
                get {
                    try {
                        return ((int)(this[this.tableSkills.ImageRefIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageRefId\' in table \'Skills\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkills.ImageRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateId {
                get {
                    return ((int)(this[this.tableSkills.TemplateIdColumn]));
                }
                set {
                    this[this.tableSkills.TemplateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRow RelatedSkillsRow {
                get {
                    return ((RelatedSkillsRow)(this.GetParentRow(this.Table.ParentRelations["RelatedSkills_Skills"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RelatedSkills_Skills"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceActivationTimeNull() {
                return this.IsNull(this.tableSkills.SourceActivationTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceActivationTimeNull() {
                this[this.tableSkills.SourceActivationTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceIsEliteNull() {
                return this.IsNull(this.tableSkills.SourceIsEliteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceIsEliteNull() {
                this[this.tableSkills.SourceIsEliteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceEnergyCostNull() {
                return this.IsNull(this.tableSkills.SourceEnergyCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceEnergyCostNull() {
                this[this.tableSkills.SourceEnergyCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceRechargeTimeNull() {
                return this.IsNull(this.tableSkills.SourceRechargeTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceRechargeTimeNull() {
                this[this.tableSkills.SourceRechargeTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceUpkeepCostNull() {
                return this.IsNull(this.tableSkills.SourceUpkeepCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceUpkeepCostNull() {
                this[this.tableSkills.SourceUpkeepCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceAdrenalineCostNull() {
                return this.IsNull(this.tableSkills.SourceAdrenalineCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceAdrenalineCostNull() {
                this[this.tableSkills.SourceAdrenalineCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceSacrificeCostNull() {
                return this.IsNull(this.tableSkills.SourceSacrificeCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceSacrificeCostNull() {
                this[this.tableSkills.SourceSacrificeCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceCausesExhaustionNull() {
                return this.IsNull(this.tableSkills.SourceCausesExhaustionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceCausesExhaustionNull() {
                this[this.tableSkills.SourceCausesExhaustionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceIsPvEOnlyNull() {
                return this.IsNull(this.tableSkills.SourceIsPvEOnlyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceIsPvEOnlyNull() {
                this[this.tableSkills.SourceIsPvEOnlyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceHasPvPNull() {
                return this.IsNull(this.tableSkills.SourceHasPvPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceHasPvPNull() {
                this[this.tableSkills.SourceHasPvPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceIsPvPNull() {
                return this.IsNull(this.tableSkills.SourceIsPvPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceIsPvPNull() {
                this[this.tableSkills.SourceIsPvPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceWikiLinkNull() {
                return this.IsNull(this.tableSkills.SourceWikiLinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceWikiLinkNull() {
                this[this.tableSkills.SourceWikiLinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageRefIdNull() {
                return this.IsNull(this.tableSkills.ImageRefIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageRefIdNull() {
                this[this.tableSkills.ImageRefIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow[] GetSkillNameRows() {
                if ((this.Table.ChildRelations["FK_Skills_SkillText"] == null)) {
                    return new SkillNameRow[0];
                }
                else {
                    return ((SkillNameRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_SkillText"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsRow[] GetAreaOfEffectsRows() {
                if ((this.Table.ChildRelations["FK_Skills_AreaOfEffects"] == null)) {
                    return new AreaOfEffectsRow[0];
                }
                else {
                    return ((AreaOfEffectsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_AreaOfEffects"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsRow[] GetCampaignsRows() {
                if ((this.Table.ChildRelations["FK_Skills_Campaigns"] == null)) {
                    return new CampaignsRow[0];
                }
                else {
                    return ((CampaignsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_Campaigns"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow[] GetSkillTypesRows() {
                if ((this.Table.ChildRelations["FK_Skills_SkillTypes"] == null)) {
                    return new SkillTypesRow[0];
                }
                else {
                    return ((SkillTypesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_SkillTypes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesRow[] GetSpecialTypesRows() {
                if ((this.Table.ChildRelations["FK_Skills_SpecialTypes"] == null)) {
                    return new SpecialTypesRow[0];
                }
                else {
                    return ((SpecialTypesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_SpecialTypes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetsRow[] GetTargetsRows() {
                if ((this.Table.ChildRelations["FK_Skills_Targets"] == null)) {
                    return new TargetsRow[0];
                }
                else {
                    return ((TargetsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_Targets"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectilesRow[] GetProjectilesRows() {
                if ((this.Table.ChildRelations["FK_Skills_Projectiles"] == null)) {
                    return new ProjectilesRow[0];
                }
                else {
                    return ((ProjectilesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_Projectiles"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesRow[] GetAttributesRows() {
                if ((this.Table.ChildRelations["FK_Skills_Attributes"] == null)) {
                    return new AttributesRow[0];
                }
                else {
                    return ((AttributesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_Attributes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRow[] GetSkillsCauses_LookupRows() {
                if ((this.Table.ChildRelations["FK_Skills_SkillsCauses_Lookup"] == null)) {
                    return new SkillsCauses_LookupRow[0];
                }
                else {
                    return ((SkillsCauses_LookupRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_SkillsCauses_Lookup"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRow[] GetSkillsRemoves_LookupRows() {
                if ((this.Table.ChildRelations["FK_Skills_SkillsRemoves_Lookup"] == null)) {
                    return new SkillsRemoves_LookupRow[0];
                }
                else {
                    return ((SkillsRemoves_LookupRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_SkillsRemoves_Lookup"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRow[] GetSkillsCategories_LookupRows() {
                if ((this.Table.ChildRelations["Skills_SkillsCategories_Lookup"] == null)) {
                    return new SkillsCategories_LookupRow[0];
                }
                else {
                    return ((SkillsCategories_LookupRow[])(base.GetChildRows(this.Table.ChildRelations["Skills_SkillsCategories_Lookup"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RangesRow[] GetRangesRows() {
                if ((this.Table.ChildRelations["FK_Skills_Ranges"] == null)) {
                    return new RangesRow[0];
                }
                else {
                    return ((RangesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_Ranges"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRow[] GetRelatedSkillsRows() {
                if ((this.Table.ChildRelations["Skills_RelatedSkills"] == null)) {
                    return new RelatedSkillsRow[0];
                }
                else {
                    return ((RelatedSkillsRow[])(base.GetChildRows(this.Table.ChildRelations["Skills_RelatedSkills"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRow[] GetProfessionsRows() {
                if ((this.Table.ChildRelations["FK_Skills_Professions"] == null)) {
                    return new ProfessionsRow[0];
                }
                else {
                    return ((ProfessionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Skills_Professions"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow[] GetImagesRows() {
                if ((this.Table.ChildRelations["Skills_Images"] == null)) {
                    return new ImagesRow[0];
                }
                else {
                    return ((ImagesRow[])(base.GetChildRows(this.Table.ChildRelations["Skills_Images"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionRow[] GetSkillDescriptionRows() {
                if ((this.Table.ChildRelations["Skills_SkillDescription"] == null)) {
                    return new SkillDescriptionRow[0];
                }
                else {
                    return ((SkillDescriptionRow[])(base.GetChildRows(this.Table.ChildRelations["Skills_SkillDescription"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillNameRow : global::System.Data.DataRow {
            
            private SkillNameDataTable tableSkillName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillName = ((SkillNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableSkillName.IdColumn]));
                }
                set {
                    this[this.tableSkillName.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Locale {
                get {
                    return ((string)(this[this.tableSkillName.LocaleColumn]));
                }
                set {
                    this[this.tableSkillName.LocaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSkillName.NameColumn]));
                }
                set {
                    this[this.tableSkillName.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_SkillText"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_SkillText"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RemovesRow : global::System.Data.DataRow {
            
            private RemovesDataTable tableRemoves;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemovesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRemoves = ((RemovesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableRemoves.IdColumn]));
                }
                set {
                    this[this.tableRemoves.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRemoves.NameColumn]));
                }
                set {
                    this[this.tableRemoves.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRow[] GetSkillsRemoves_LookupRows() {
                if ((this.Table.ChildRelations["FK_Removes_SkillsRemoves_Lookup"] == null)) {
                    return new SkillsRemoves_LookupRow[0];
                }
                else {
                    return ((SkillsRemoves_LookupRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Removes_SkillsRemoves_Lookup"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillsRemoves_LookupRow : global::System.Data.DataRow {
            
            private SkillsRemoves_LookupDataTable tableSkillsRemoves_Lookup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsRemoves_LookupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillsRemoves_Lookup = ((SkillsRemoves_LookupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SkillsId {
                get {
                    return ((int)(this[this.tableSkillsRemoves_Lookup.SkillsIdColumn]));
                }
                set {
                    this[this.tableSkillsRemoves_Lookup.SkillsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemovesId {
                get {
                    return ((int)(this[this.tableSkillsRemoves_Lookup.RemovesIdColumn]));
                }
                set {
                    this[this.tableSkillsRemoves_Lookup.RemovesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_SkillsRemoves_Lookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_SkillsRemoves_Lookup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemovesRow RemovesRow {
                get {
                    return ((RemovesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Removes_SkillsRemoves_Lookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Removes_SkillsRemoves_Lookup"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CampaignsRow : global::System.Data.DataRow {
            
            private CampaignsDataTable tableCampaigns;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CampaignsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCampaigns = ((CampaignsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableCampaigns.IdColumn]));
                }
                set {
                    this[this.tableCampaigns.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCampaigns.NameColumn]));
                }
                set {
                    this[this.tableCampaigns.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_Campaigns"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_Campaigns"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillTypesRow : global::System.Data.DataRow {
            
            private SkillTypesDataTable tableSkillTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillTypes = ((SkillTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableSkillTypes.IdColumn]));
                }
                set {
                    this[this.tableSkillTypes.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSkillTypes.NameColumn]));
                }
                set {
                    this[this.tableSkillTypes.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentTypeId {
                get {
                    try {
                        return ((int)(this[this.tableSkillTypes.ParentTypeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentTypeId\' in table \'SkillTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTypes.ParentTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_SkillTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_SkillTypes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow SkillTypesRowParent {
                get {
                    return ((SkillTypesRow)(this.GetParentRow(this.Table.ParentRelations["SkillTypes_SkillTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SkillTypes_SkillTypes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentTypeIdNull() {
                return this.IsNull(this.tableSkillTypes.ParentTypeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentTypeIdNull() {
                this[this.tableSkillTypes.ParentTypeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow[] GetSkillTypesRows() {
                if ((this.Table.ChildRelations["SkillTypes_SkillTypes"] == null)) {
                    return new SkillTypesRow[0];
                }
                else {
                    return ((SkillTypesRow[])(base.GetChildRows(this.Table.ChildRelations["SkillTypes_SkillTypes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SpecialTypesRow : global::System.Data.DataRow {
            
            private SpecialTypesDataTable tableSpecialTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SpecialTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSpecialTypes = ((SpecialTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableSpecialTypes.IdColumn]));
                }
                set {
                    this[this.tableSpecialTypes.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSpecialTypes.NameColumn]));
                }
                set {
                    this[this.tableSpecialTypes.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_SpecialTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_SpecialTypes"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RangesRow : global::System.Data.DataRow {
            
            private RangesDataTable tableRanges;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RangesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRanges = ((RangesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableRanges.IdColumn]));
                }
                set {
                    this[this.tableRanges.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRanges.NameColumn]));
                }
                set {
                    this[this.tableRanges.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_Ranges"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_Ranges"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AreaOfEffectsRow : global::System.Data.DataRow {
            
            private AreaOfEffectsDataTable tableAreaOfEffects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AreaOfEffectsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAreaOfEffects = ((AreaOfEffectsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableAreaOfEffects.IdColumn]));
                }
                set {
                    this[this.tableAreaOfEffects.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableAreaOfEffects.NameColumn]));
                }
                set {
                    this[this.tableAreaOfEffects.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_AreaOfEffects"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_AreaOfEffects"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AttributesRow : global::System.Data.DataRow {
            
            private AttributesDataTable tableAttributes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AttributesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAttributes = ((AttributesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableAttributes.IdColumn]));
                }
                set {
                    this[this.tableAttributes.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableAttributes.NameColumn]));
                }
                set {
                    this[this.tableAttributes.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateId {
                get {
                    try {
                        return ((int)(this[this.tableAttributes.TemplateIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateId\' in table \'Attributes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttributes.TemplateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrimaryOnly {
                get {
                    try {
                        return ((bool)(this[this.tableAttributes.IsPrimaryOnlyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPrimaryOnly\' in table \'Attributes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttributes.IsPrimaryOnlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProfessionRefId {
                get {
                    try {
                        return ((int)(this[this.tableAttributes.ProfessionRefIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProfessionRefId\' in table \'Attributes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAttributes.ProfessionRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_Attributes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_Attributes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateIdNull() {
                return this.IsNull(this.tableAttributes.TemplateIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateIdNull() {
                this[this.tableAttributes.TemplateIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPrimaryOnlyNull() {
                return this.IsNull(this.tableAttributes.IsPrimaryOnlyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPrimaryOnlyNull() {
                this[this.tableAttributes.IsPrimaryOnlyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProfessionRefIdNull() {
                return this.IsNull(this.tableAttributes.ProfessionRefIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProfessionRefIdNull() {
                this[this.tableAttributes.ProfessionRefIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRow[] GetProfessionsRows() {
                if ((this.Table.ChildRelations["Attributes_Professions"] == null)) {
                    return new ProfessionsRow[0];
                }
                else {
                    return ((ProfessionsRow[])(base.GetChildRows(this.Table.ChildRelations["Attributes_Professions"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProfessionsRow : global::System.Data.DataRow {
            
            private ProfessionsDataTable tableProfessions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProfessionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProfessions = ((ProfessionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableProfessions.IdColumn]));
                }
                set {
                    this[this.tableProfessions.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProfessions.NameColumn]));
                }
                set {
                    this[this.tableProfessions.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateId {
                get {
                    try {
                        return ((int)(this[this.tableProfessions.TemplateIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateId\' in table \'Professions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProfessions.TemplateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageRefId {
                get {
                    try {
                        return ((int)(this[this.tableProfessions.ImageRefIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageRefId\' in table \'Professions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProfessions.ImageRefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidPrimary {
                get {
                    return ((bool)(this[this.tableProfessions.IsValidPrimaryColumn]));
                }
                set {
                    this[this.tableProfessions.IsValidPrimaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_Professions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_Professions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesRow AttributesRow {
                get {
                    return ((AttributesRow)(this.GetParentRow(this.Table.ParentRelations["Attributes_Professions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Attributes_Professions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateIdNull() {
                return this.IsNull(this.tableProfessions.TemplateIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateIdNull() {
                this[this.tableProfessions.TemplateIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageRefIdNull() {
                return this.IsNull(this.tableProfessions.ImageRefIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageRefIdNull() {
                this[this.tableProfessions.ImageRefIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow[] GetImagesRows() {
                if ((this.Table.ChildRelations["Professions_Images"] == null)) {
                    return new ImagesRow[0];
                }
                else {
                    return ((ImagesRow[])(base.GetChildRows(this.Table.ChildRelations["Professions_Images"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TargetsRow : global::System.Data.DataRow {
            
            private TargetsDataTable tableTargets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTargets = ((TargetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableTargets.IdColumn]));
                }
                set {
                    this[this.tableTargets.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTargets.NameColumn]));
                }
                set {
                    this[this.tableTargets.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_Targets"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_Targets"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectilesRow : global::System.Data.DataRow {
            
            private ProjectilesDataTable tableProjectiles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectilesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectiles = ((ProjectilesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableProjectiles.IdColumn]));
                }
                set {
                    this[this.tableProjectiles.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProjectiles.NameColumn]));
                }
                set {
                    this[this.tableProjectiles.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_Projectiles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_Projectiles"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CausesRow : global::System.Data.DataRow {
            
            private CausesDataTable tableCauses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CausesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCauses = ((CausesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableCauses.IdColumn]));
                }
                set {
                    this[this.tableCauses.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCauses.NameColumn]));
                }
                set {
                    this[this.tableCauses.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRow[] GetSkillsCauses_LookupRows() {
                if ((this.Table.ChildRelations["FK_Causes_SkillsCauses_Lookup"] == null)) {
                    return new SkillsCauses_LookupRow[0];
                }
                else {
                    return ((SkillsCauses_LookupRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Causes_SkillsCauses_Lookup"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillsCauses_LookupRow : global::System.Data.DataRow {
            
            private SkillsCauses_LookupDataTable tableSkillsCauses_Lookup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsCauses_LookupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillsCauses_Lookup = ((SkillsCauses_LookupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SkillsId {
                get {
                    return ((int)(this[this.tableSkillsCauses_Lookup.SkillsIdColumn]));
                }
                set {
                    this[this.tableSkillsCauses_Lookup.SkillsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CausesId {
                get {
                    return ((int)(this[this.tableSkillsCauses_Lookup.CausesIdColumn]));
                }
                set {
                    this[this.tableSkillsCauses_Lookup.CausesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CausesRow CausesRow {
                get {
                    return ((CausesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Causes_SkillsCauses_Lookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Causes_SkillsCauses_Lookup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Skills_SkillsCauses_Lookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Skills_SkillsCauses_Lookup"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CategoriesRow : global::System.Data.DataRow {
            
            private CategoriesDataTable tableCategories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CategoriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategories = ((CategoriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableCategories.IdColumn]));
                }
                set {
                    this[this.tableCategories.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCategories.NameColumn]));
                }
                set {
                    this[this.tableCategories.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRow[] GetSkillsCategories_LookupRows() {
                if ((this.Table.ChildRelations["Categories_SkillsCategories_Lookup"] == null)) {
                    return new SkillsCategories_LookupRow[0];
                }
                else {
                    return ((SkillsCategories_LookupRow[])(base.GetChildRows(this.Table.ChildRelations["Categories_SkillsCategories_Lookup"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillsCategories_LookupRow : global::System.Data.DataRow {
            
            private SkillsCategories_LookupDataTable tableSkillsCategories_Lookup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillsCategories_LookupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillsCategories_Lookup = ((SkillsCategories_LookupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SkillsId {
                get {
                    return ((int)(this[this.tableSkillsCategories_Lookup.SkillsIdColumn]));
                }
                set {
                    this[this.tableSkillsCategories_Lookup.SkillsIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoriesId {
                get {
                    return ((int)(this[this.tableSkillsCategories_Lookup.CategoriesIdColumn]));
                }
                set {
                    this[this.tableSkillsCategories_Lookup.CategoriesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow CategoriesRow {
                get {
                    return ((CategoriesRow)(this.GetParentRow(this.Table.ParentRelations["Categories_SkillsCategories_Lookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Categories_SkillsCategories_Lookup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["Skills_SkillsCategories_Lookup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Skills_SkillsCategories_Lookup"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RelatedSkillsRow : global::System.Data.DataRow {
            
            private RelatedSkillsDataTable tableRelatedSkills;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RelatedSkillsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRelatedSkills = ((RelatedSkillsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentSkillId {
                get {
                    return ((int)(this[this.tableRelatedSkills.ParentSkillIdColumn]));
                }
                set {
                    this[this.tableRelatedSkills.ParentSkillIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RelatedSkillId {
                get {
                    return ((int)(this[this.tableRelatedSkills.RelatedSkillIdColumn]));
                }
                set {
                    this[this.tableRelatedSkills.RelatedSkillIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["Skills_RelatedSkills"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Skills_RelatedSkills"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow[] GetSkillsRows() {
                if ((this.Table.ChildRelations["RelatedSkills_Skills"] == null)) {
                    return new SkillsRow[0];
                }
                else {
                    return ((SkillsRow[])(base.GetChildRows(this.Table.ChildRelations["RelatedSkills_Skills"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImagesRow : global::System.Data.DataRow {
            
            private ImagesDataTable tableImages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImages = ((ImagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableImages.IdColumn]));
                }
                set {
                    this[this.tableImages.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Data {
                get {
                    return ((byte[])(this[this.tableImages.DataColumn]));
                }
                set {
                    this[this.tableImages.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["Skills_Images"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Skills_Images"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRow ProfessionsRow {
                get {
                    return ((ProfessionsRow)(this.GetParentRow(this.Table.ParentRelations["Professions_Images"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Professions_Images"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillDescriptionRow : global::System.Data.DataRow {
            
            private SkillDescriptionDataTable tableSkillDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillDescriptionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillDescription = ((SkillDescriptionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableSkillDescription.IdColumn]));
                }
                set {
                    this[this.tableSkillDescription.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Locale {
                get {
                    return ((string)(this[this.tableSkillDescription.LocaleColumn]));
                }
                set {
                    this[this.tableSkillDescription.LocaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableSkillDescription.DescriptionColumn]));
                }
                set {
                    this[this.tableSkillDescription.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConciseDescription {
                get {
                    try {
                        return ((string)(this[this.tableSkillDescription.ConciseDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConciseDescription\' in table \'SkillDescription\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillDescription.ConciseDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow SkillsRow {
                get {
                    return ((SkillsRow)(this.GetParentRow(this.Table.ParentRelations["Skills_SkillDescription"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Skills_SkillDescription"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConciseDescriptionNull() {
                return this.IsNull(this.tableSkillDescription.ConciseDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConciseDescriptionNull() {
                this[this.tableSkillDescription.ConciseDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillsRowChangeEvent : global::System.EventArgs {
            
            private SkillsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRowChangeEvent(SkillsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillNameRowChangeEvent : global::System.EventArgs {
            
            private SkillNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRowChangeEvent(SkillNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RemovesRowChangeEvent : global::System.EventArgs {
            
            private RemovesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemovesRowChangeEvent(RemovesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemovesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillsRemoves_LookupRowChangeEvent : global::System.EventArgs {
            
            private SkillsRemoves_LookupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRowChangeEvent(SkillsRemoves_LookupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsRemoves_LookupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CampaignsRowChangeEvent : global::System.EventArgs {
            
            private CampaignsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsRowChangeEvent(CampaignsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CampaignsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillTypesRowChangeEvent : global::System.EventArgs {
            
            private SkillTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRowChangeEvent(SkillTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SpecialTypesRowChangeEvent : global::System.EventArgs {
            
            private SpecialTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesRowChangeEvent(SpecialTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SpecialTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RangesRowChangeEvent : global::System.EventArgs {
            
            private RangesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RangesRowChangeEvent(RangesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RangesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AreaOfEffectsRowChangeEvent : global::System.EventArgs {
            
            private AreaOfEffectsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsRowChangeEvent(AreaOfEffectsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AreaOfEffectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AttributesRowChangeEvent : global::System.EventArgs {
            
            private AttributesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesRowChangeEvent(AttributesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AttributesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProfessionsRowChangeEvent : global::System.EventArgs {
            
            private ProfessionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRowChangeEvent(ProfessionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProfessionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TargetsRowChangeEvent : global::System.EventArgs {
            
            private TargetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetsRowChangeEvent(TargetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectilesRowChangeEvent : global::System.EventArgs {
            
            private ProjectilesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectilesRowChangeEvent(ProjectilesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CausesRowChangeEvent : global::System.EventArgs {
            
            private CausesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CausesRowChangeEvent(CausesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CausesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillsCauses_LookupRowChangeEvent : global::System.EventArgs {
            
            private SkillsCauses_LookupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRowChangeEvent(SkillsCauses_LookupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCauses_LookupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CategoriesRowChangeEvent : global::System.EventArgs {
            
            private CategoriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRowChangeEvent(CategoriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillsCategories_LookupRowChangeEvent : global::System.EventArgs {
            
            private SkillsCategories_LookupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRowChangeEvent(SkillsCategories_LookupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillsCategories_LookupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RelatedSkillsRowChangeEvent : global::System.EventArgs {
            
            private RelatedSkillsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRowChangeEvent(RelatedSkillsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelatedSkillsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImagesRowChangeEvent : global::System.EventArgs {
            
            private ImagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRowChangeEvent(ImagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillDescriptionRowChangeEvent : global::System.EventArgs {
            
            private SkillDescriptionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionRowChangeEvent(SkillDescriptionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillDescriptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591