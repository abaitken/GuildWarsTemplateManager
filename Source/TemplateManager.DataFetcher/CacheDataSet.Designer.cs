//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Data.Common;
using System.Data.SqlServerCe;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using TemplateManager.DataFetcher.Properties;

#pragma warning disable 1591

namespace GuildWarsDataFetcher
{
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("CacheDataSet")]
    [HelpKeyword("vs.data.DataSet")]
    public class CacheDataSet : DataSet
    {
        #region Delegates

        public delegate void CacheRowChangeEventHandler(object sender, CacheRowChangeEvent e);

        #endregion

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;
        private CacheDataTable tableCache;

        [DebuggerNonUserCode]
        public CacheDataSet()
        {
            BeginInit();
            InitClass();
            var schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode]
        protected CacheDataSet(SerializationInfo info, StreamingContext context)
            :
                base(info, context, false)
        {
            if(IsBinarySerialized(info, context))
            {
                InitVars(false);
                var schemaChangedHandler1 = new CollectionChangeEventHandler(SchemaChanged);
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            var strSchema = ((string) (info.GetValue("XmlSchema", typeof(string))));
            if((DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema))
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if((ds.Tables["Cache"] != null))
                {
                    base.Tables.Add(new CacheDataTable(ds.Tables["Cache"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            var schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CacheDataTable Cache
        {
            get { return tableCache; }
        }

        [DebuggerNonUserCode]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get { return _schemaSerializationMode; }
            set { _schemaSerializationMode = value; }
        }

        [DebuggerNonUserCode]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get { return base.Tables; }
        }

        [DebuggerNonUserCode]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get { return base.Relations; }
        }

        [DebuggerNonUserCode]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode]
        public override DataSet Clone()
        {
            var cln = ((CacheDataSet) (base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode]
        protected override void ReadXmlSerializable(XmlReader reader)
        {
            if((DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema))
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if((ds.Tables["Cache"] != null))
                {
                    base.Tables.Add(new CacheDataTable(ds.Tables["Cache"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode]
        protected override XmlSchema GetSchemaSerializable()
        {
            var stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode]
        internal void InitVars(bool initTable)
        {
            tableCache = ((CacheDataTable) (base.Tables["Cache"]));
            if(initTable)
            {
                if((tableCache != null))
                {
                    tableCache.InitVars();
                }
            }
        }

        [DebuggerNonUserCode]
        private void InitClass()
        {
            DataSetName = "CacheDataSet";
            Prefix = "";
            Namespace = "http://tempuri.org/CacheDataSet.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableCache = new CacheDataTable();
            base.Tables.Add(tableCache);
        }

        [DebuggerNonUserCode]
        private bool ShouldSerializeCache()
        {
            return false;
        }

        [DebuggerNonUserCode]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if((e.Action == CollectionChangeAction.Remove))
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
        {
            var ds = new CacheDataSet();
            var type = new XmlSchemaComplexType();
            var sequence = new XmlSchemaSequence();
            var any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            XmlSchema dsSchema = ds.GetSchemaSerializable();
            if(xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new MemoryStream();
                var s2 = new MemoryStream();
                try
                {
                    XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for(IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext();)
                    {
                        schema = ((XmlSchema) (schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for(;
                                ((s1.Position != s1.Length)
                                 && (s1.ReadByte() == s2.ReadByte()));)
                            {
                                ;
                            }
                            if((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if((s1 != null))
                    {
                        s1.Close();
                    }
                    if((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        #region Nested type: CacheDataTable

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [Serializable]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public class CacheDataTable : TypedTableBase<CacheRow>
        {
            private DataColumn columndata;
            private DataColumn columnid;

            [DebuggerNonUserCode]
            public CacheDataTable()
            {
                TableName = "Cache";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode]
            internal CacheDataTable(DataTable table)
            {
                TableName = table.TableName;
                if((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    CaseSensitive = table.CaseSensitive;
                }
                if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    Locale = table.Locale;
                }
                if((table.Namespace != table.DataSet.Namespace))
                {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode]
            protected CacheDataTable(SerializationInfo info, StreamingContext context)
                :
                    base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode]
            public DataColumn idColumn
            {
                get { return columnid; }
            }

            [DebuggerNonUserCode]
            public DataColumn dataColumn
            {
                get { return columndata; }
            }

            [DebuggerNonUserCode]
            [Browsable(false)]
            public int Count
            {
                get { return Rows.Count; }
            }

            [DebuggerNonUserCode]
            public CacheRow this[int index]
            {
                get { return ((CacheRow) (Rows[index])); }
            }

            public event CacheRowChangeEventHandler CacheRowChanging;

            public event CacheRowChangeEventHandler CacheRowChanged;

            public event CacheRowChangeEventHandler CacheRowDeleting;

            public event CacheRowChangeEventHandler CacheRowDeleted;

            [DebuggerNonUserCode]
            public void AddCacheRow(CacheRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode]
            public CacheRow AddCacheRow(string id, string data)
            {
                var rowCacheRow = ((CacheRow) (NewRow()));
                var columnValuesArray = new object[]
                                            {
                                                id,
                                                data
                                            };
                rowCacheRow.ItemArray = columnValuesArray;
                Rows.Add(rowCacheRow);
                return rowCacheRow;
            }

            [DebuggerNonUserCode]
            public CacheRow FindByid(string id)
            {
                return ((CacheRow) (Rows.Find(new object[]
                                                  {
                                                      id
                                                  })));
            }

            [DebuggerNonUserCode]
            public override DataTable Clone()
            {
                var cln = ((CacheDataTable) (base.Clone()));
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CacheDataTable();
            }

            [DebuggerNonUserCode]
            internal void InitVars()
            {
                columnid = base.Columns["id"];
                columndata = base.Columns["data"];
            }

            [DebuggerNonUserCode]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(string), null, MappingType.Element);
                base.Columns.Add(columnid);
                columndata = new DataColumn("data", typeof(string), null, MappingType.Element);
                base.Columns.Add(columndata);
                Constraints.Add(new UniqueConstraint("Constraint1",
                                                     new[]
                                                         {
                                                             columnid
                                                         },
                                                     true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnid.MaxLength = 500;
                columndata.AllowDBNull = false;
                columndata.MaxLength = 536870911;
            }

            [DebuggerNonUserCode]
            public CacheRow NewCacheRow()
            {
                return ((CacheRow) (NewRow()));
            }

            [DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CacheRow(builder);
            }

            [DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CacheRow);
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if((CacheRowChanged != null))
                {
                    CacheRowChanged(this, new CacheRowChangeEvent(((CacheRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if((CacheRowChanging != null))
                {
                    CacheRowChanging(this, new CacheRowChangeEvent(((CacheRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if((CacheRowDeleted != null))
                {
                    CacheRowDeleted(this, new CacheRowChangeEvent(((CacheRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if((CacheRowDeleting != null))
                {
                    CacheRowDeleting(this, new CacheRowChangeEvent(((CacheRow) (e.Row)), e.Action));
                }
            }

            [DebuggerNonUserCode]
            public void RemoveCacheRow(CacheRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                var type = new XmlSchemaComplexType();
                var sequence = new XmlSchemaSequence();
                var ds = new CacheDataSet();
                var any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CacheDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if(xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new MemoryStream();
                    var s2 = new MemoryStream();
                    try
                    {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for(IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                            schemas.MoveNext();)
                        {
                            schema = ((XmlSchema) (schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for(;
                                    ((s1.Position != s1.Length)
                                     && (s1.ReadByte() == s2.ReadByte()));)
                                {
                                    ;
                                }
                                if((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if((s1 != null))
                        {
                            s1.Close();
                        }
                        if((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        #endregion

        #region Nested type: CacheRow

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CacheRow : DataRow
        {
            private readonly CacheDataTable tableCache;

            [DebuggerNonUserCode]
            internal CacheRow(DataRowBuilder rb)
                :
                    base(rb)
            {
                tableCache = ((CacheDataTable) (Table));
            }

            [DebuggerNonUserCode]
            public string id
            {
                get { return ((string) (this[tableCache.idColumn])); }
                set { this[tableCache.idColumn] = value; }
            }

            [DebuggerNonUserCode]
            public string data
            {
                get { return ((string) (this[tableCache.dataColumn])); }
                set { this[tableCache.dataColumn] = value; }
            }
        }

        #endregion

        #region Nested type: CacheRowChangeEvent

        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CacheRowChangeEvent : EventArgs
        {
            private readonly DataRowAction eventAction;
            private readonly CacheRow eventRow;

            [DebuggerNonUserCode]
            public CacheRowChangeEvent(CacheRow row, DataRowAction action)
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode]
            public CacheRow Row
            {
                get { return eventRow; }
            }

            [DebuggerNonUserCode]
            public DataRowAction Action
            {
                get { return eventAction; }
            }
        }

        #endregion
    }
}

namespace GuildWarsDataFetcher.CacheDataSetTableAdapters
{
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
              ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public class CacheTableAdapter : Component
    {
        private SqlCeDataAdapter _adapter;
        private SqlCeCommand[] _commandCollection;

        private SqlCeConnection _connection;

        private SqlCeTransaction _transaction;

        [DebuggerNonUserCode]
        public CacheTableAdapter()
        {
            ClearBeforeFill = true;
        }

        [DebuggerNonUserCode]
        protected internal SqlCeDataAdapter Adapter
        {
            get
            {
                if((_adapter == null))
                {
                    InitAdapter();
                }
                return _adapter;
            }
        }

        [DebuggerNonUserCode]
        internal SqlCeConnection Connection
        {
            get
            {
                if((_connection == null))
                {
                    InitConnection();
                }
                return _connection;
            }
            set
            {
                _connection = value;
                if((Adapter.InsertCommand != null))
                {
                    Adapter.InsertCommand.Connection = value;
                }
                if((Adapter.DeleteCommand != null))
                {
                    Adapter.DeleteCommand.Connection = value;
                }
                if((Adapter.UpdateCommand != null))
                {
                    Adapter.UpdateCommand.Connection = value;
                }
                for(int i = 0; (i < CommandCollection.Length); i = (i + 1))
                {
                    if((CommandCollection[i] != null))
                    {
                        ((CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [DebuggerNonUserCode]
        internal SqlCeTransaction Transaction
        {
            get { return _transaction; }
            set
            {
                _transaction = value;
                for(int i = 0; (i < CommandCollection.Length); i = (i + 1))
                {
                    CommandCollection[i].Transaction = _transaction;
                }
                if(((Adapter != null)
                    && (Adapter.DeleteCommand != null)))
                {
                    Adapter.DeleteCommand.Transaction = _transaction;
                }
                if(((Adapter != null)
                    && (Adapter.InsertCommand != null)))
                {
                    Adapter.InsertCommand.Transaction = _transaction;
                }
                if(((Adapter != null)
                    && (Adapter.UpdateCommand != null)))
                {
                    Adapter.UpdateCommand.Transaction = _transaction;
                }
            }
        }

        [DebuggerNonUserCode]
        protected SqlCeCommand[] CommandCollection
        {
            get
            {
                if((_commandCollection == null))
                {
                    InitCommandCollection();
                }
                return _commandCollection;
            }
        }

        [DebuggerNonUserCode]
        public bool ClearBeforeFill { get; set; }

        [DebuggerNonUserCode]
        private void InitAdapter()
        {
            _adapter = new SqlCeDataAdapter();
            var tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Cache";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("data", "data");
            _adapter.TableMappings.Add(tableMapping);
            _adapter.DeleteCommand = new SqlCeCommand();
            _adapter.DeleteCommand.Connection = Connection;
            _adapter.DeleteCommand.CommandText = "DELETE FROM [Cache] WHERE (([id] = @p1))";
            _adapter.DeleteCommand.CommandType = CommandType.Text;
            _adapter.DeleteCommand.Parameters.Add(new SqlCeParameter("@p1",
                                                                     SqlDbType.NVarChar,
                                                                     0,
                                                                     ParameterDirection.Input,
                                                                     true,
                                                                     0,
                                                                     0,
                                                                     "id",
                                                                     DataRowVersion.Original,
                                                                     null));
            _adapter.InsertCommand = new SqlCeCommand();
            _adapter.InsertCommand.Connection = Connection;
            _adapter.InsertCommand.CommandText = "INSERT INTO [Cache] ([id], [data]) VALUES (@p1, @p2)";
            _adapter.InsertCommand.CommandType = CommandType.Text;
            _adapter.InsertCommand.Parameters.Add(new SqlCeParameter("@p1",
                                                                     SqlDbType.NVarChar,
                                                                     0,
                                                                     ParameterDirection.Input,
                                                                     true,
                                                                     0,
                                                                     0,
                                                                     "id",
                                                                     DataRowVersion.Current,
                                                                     null));
            _adapter.InsertCommand.Parameters.Add(new SqlCeParameter("@p2",
                                                                     SqlDbType.NText,
                                                                     0,
                                                                     ParameterDirection.Input,
                                                                     true,
                                                                     0,
                                                                     0,
                                                                     "data",
                                                                     DataRowVersion.Current,
                                                                     null));
            _adapter.UpdateCommand = new SqlCeCommand();
            _adapter.UpdateCommand.Connection = Connection;
            _adapter.UpdateCommand.CommandText = "UPDATE [Cache] SET [id] = @p1, [data] = @p2 WHERE (([id] = @p3))";
            _adapter.UpdateCommand.CommandType = CommandType.Text;
            _adapter.UpdateCommand.Parameters.Add(new SqlCeParameter("@p1",
                                                                     SqlDbType.NVarChar,
                                                                     0,
                                                                     ParameterDirection.Input,
                                                                     true,
                                                                     0,
                                                                     0,
                                                                     "id",
                                                                     DataRowVersion.Current,
                                                                     null));
            _adapter.UpdateCommand.Parameters.Add(new SqlCeParameter("@p2",
                                                                     SqlDbType.NText,
                                                                     0,
                                                                     ParameterDirection.Input,
                                                                     true,
                                                                     0,
                                                                     0,
                                                                     "data",
                                                                     DataRowVersion.Current,
                                                                     null));
            _adapter.UpdateCommand.Parameters.Add(new SqlCeParameter("@p3",
                                                                     SqlDbType.NVarChar,
                                                                     0,
                                                                     ParameterDirection.Input,
                                                                     true,
                                                                     0,
                                                                     0,
                                                                     "id",
                                                                     DataRowVersion.Original,
                                                                     null));
        }

        [DebuggerNonUserCode]
        private void InitConnection()
        {
            _connection = new SqlCeConnection();
            _connection.ConnectionString = Settings.Default.CacheConnectionString;
        }

        [DebuggerNonUserCode]
        private void InitCommandCollection()
        {
            _commandCollection = new SqlCeCommand[1];
            _commandCollection[0] = new SqlCeCommand();
            _commandCollection[0].Connection = Connection;
            _commandCollection[0].CommandText = "SELECT [id], [data] FROM [Cache]";
            _commandCollection[0].CommandType = CommandType.Text;
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(CacheDataSet.CacheDataTable dataTable)
        {
            Adapter.SelectCommand = CommandCollection[0];
            if(ClearBeforeFill)
            {
                dataTable.Clear();
            }
            int returnValue = Adapter.Fill(dataTable);
            return returnValue;
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual CacheDataSet.CacheDataTable GetData()
        {
            Adapter.SelectCommand = CommandCollection[0];
            var dataTable = new CacheDataSet.CacheDataTable();
            Adapter.Fill(dataTable);
            return dataTable;
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(CacheDataSet.CacheDataTable dataTable)
        {
            return Adapter.Update(dataTable);
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(CacheDataSet dataSet)
        {
            return Adapter.Update(dataSet, "Cache");
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow)
        {
            return Adapter.Update(new[]
                                      {
                                          dataRow
                                      });
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows)
        {
            return Adapter.Update(dataRows);
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(string p1)
        {
            if((p1 == null))
            {
                throw new ArgumentNullException("p1");
            }
            else
            {
                Adapter.DeleteCommand.Parameters[0].Value = ((p1));
            }
            ConnectionState previousConnectionState = Adapter.DeleteCommand.Connection.State;
            if(((Adapter.DeleteCommand.Connection.State & ConnectionState.Open)
                != ConnectionState.Open))
            {
                Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if((previousConnectionState == ConnectionState.Closed))
                {
                    Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(string p1, string p2)
        {
            if((p1 == null))
            {
                throw new ArgumentNullException("p1");
            }
            else
            {
                Adapter.InsertCommand.Parameters[0].Value = ((p1));
            }
            if((p2 == null))
            {
                throw new ArgumentNullException("p2");
            }
            else
            {
                Adapter.InsertCommand.Parameters[1].Value = ((p2));
            }
            ConnectionState previousConnectionState = Adapter.InsertCommand.Connection.State;
            if(((Adapter.InsertCommand.Connection.State & ConnectionState.Open)
                != ConnectionState.Open))
            {
                Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if((previousConnectionState == ConnectionState.Closed))
                {
                    Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string p1, string p2, string p3)
        {
            if((p1 == null))
            {
                throw new ArgumentNullException("p1");
            }
            else
            {
                Adapter.UpdateCommand.Parameters[0].Value = ((p1));
            }
            if((p2 == null))
            {
                throw new ArgumentNullException("p2");
            }
            else
            {
                Adapter.UpdateCommand.Parameters[1].Value = ((p2));
            }
            if((p3 == null))
            {
                throw new ArgumentNullException("p3");
            }
            else
            {
                Adapter.UpdateCommand.Parameters[2].Value = ((p3));
            }
            ConnectionState previousConnectionState = Adapter.UpdateCommand.Connection.State;
            if(((Adapter.UpdateCommand.Connection.State & ConnectionState.Open)
                != ConnectionState.Open))
            {
                Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally
            {
                if((previousConnectionState == ConnectionState.Closed))
                {
                    Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [DebuggerNonUserCode]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string p2, string p3)
        {
            return Update(p3, p2, p3);
        }
    }

    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
              "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapterManager")]
    public class TableAdapterManager : Component
    {
        #region UpdateOrderOption enum

        /// <summary>
        ///Update Order Option
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption
        {
            InsertUpdateDelete = 0,

            UpdateInsertDelete = 1,
        }

        #endregion

        private CacheTableAdapter _cacheTableAdapter;

        private IDbConnection _connection;

        [DebuggerNonUserCode]
        public UpdateOrderOption UpdateOrder { get; set; }

        [DebuggerNonUserCode]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
                "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
                "", "System.Drawing.Design.UITypeEditor")]
        public CacheTableAdapter CacheTableAdapter
        {
            get { return _cacheTableAdapter; }
            set { _cacheTableAdapter = value; }
        }

        [DebuggerNonUserCode]
        public bool BackupDataSetBeforeUpdate { get; set; }

        [DebuggerNonUserCode]
        [Browsable(false)]
        public IDbConnection Connection
        {
            get
            {
                if((_connection != null))
                {
                    return _connection;
                }
                if(((_cacheTableAdapter != null)
                    && (_cacheTableAdapter.Connection != null)))
                {
                    return _cacheTableAdapter.Connection;
                }
                return null;
            }
            set { _connection = value; }
        }

        [DebuggerNonUserCode]
        [Browsable(false)]
        public int TableAdapterInstanceCount
        {
            get
            {
                int count = 0;
                if((_cacheTableAdapter != null))
                {
                    count = (count + 1);
                }
                return count;
            }
        }

        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode]
        private int UpdateUpdatedRows(CacheDataSet dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
        {
            int result = 0;
            if((_cacheTableAdapter != null))
            {
                DataRow[] updatedRows = dataSet.Cache.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                if(((updatedRows != null)
                    && (0 < updatedRows.Length)))
                {
                    result = (result + _cacheTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }

        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode]
        private int UpdateInsertedRows(CacheDataSet dataSet, List<DataRow> allAddedRows)
        {
            int result = 0;
            if((_cacheTableAdapter != null))
            {
                DataRow[] addedRows = dataSet.Cache.Select(null, null, DataViewRowState.Added);
                if(((addedRows != null)
                    && (0 < addedRows.Length)))
                {
                    result = (result + _cacheTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }

        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [DebuggerNonUserCode]
        private int UpdateDeletedRows(CacheDataSet dataSet, List<DataRow> allChangedRows)
        {
            int result = 0;
            if((_cacheTableAdapter != null))
            {
                DataRow[] deletedRows = dataSet.Cache.Select(null, null, DataViewRowState.Deleted);
                if(((deletedRows != null)
                    && (0 < deletedRows.Length)))
                {
                    result = (result + _cacheTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }

        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [DebuggerNonUserCode]
        private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
        {
            if(((updatedRows == null)
                || (updatedRows.Length < 1)))
            {
                return updatedRows;
            }
            if(((allAddedRows == null)
                || (allAddedRows.Count < 1)))
            {
                return updatedRows;
            }
            var realUpdatedRows = new List<DataRow>();
            for(int i = 0; (i < updatedRows.Length); i = (i + 1))
            {
                DataRow row = updatedRows[i];
                if((allAddedRows.Contains(row) == false))
                {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }

        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [DebuggerNonUserCode]
        public virtual int UpdateAll(CacheDataSet dataSet)
        {
            if((dataSet == null))
            {
                throw new ArgumentNullException("dataSet");
            }
            if((dataSet.HasChanges() == false))
            {
                return 0;
            }
            if(((_cacheTableAdapter != null)
                && (MatchTableAdapterConnection(_cacheTableAdapter.Connection) == false)))
            {
                throw new ArgumentException(
                    "All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                    "tring.");
            }
            IDbConnection workConnection = Connection;
            if((workConnection == null))
            {
                throw new ApplicationException(
                    "TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                    "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if(((workConnection.State & ConnectionState.Broken)
                == ConnectionState.Broken))
            {
                workConnection.Close();
            }
            if((workConnection.State == ConnectionState.Closed))
            {
                workConnection.Open();
                workConnOpened = true;
            }
            IDbTransaction workTransaction = workConnection.BeginTransaction();
            if((workTransaction == null))
            {
                throw new ApplicationException(
                    "The transaction cannot begin. The current data connection does not support transa" +
                    "ctions or the current state is not allowing the transaction to begin.");
            }
            var allChangedRows = new List<DataRow>();
            var allAddedRows = new List<DataRow>();
            var adaptersWithAcceptChangesDuringUpdate = new List<DataAdapter>();
            var revertConnections = new Dictionary<object, IDbConnection>();
            int result = 0;
            DataSet backupDataSet = null;
            if(BackupDataSetBeforeUpdate)
            {
                backupDataSet = new DataSet();
                backupDataSet.Merge(dataSet);
            }
            try
            {
                // ---- Prepare for update -----------
                //
                if((_cacheTableAdapter != null))
                {
                    revertConnections.Add(_cacheTableAdapter, _cacheTableAdapter.Connection);
                    _cacheTableAdapter.Connection = ((SqlCeConnection) (workConnection));
                    _cacheTableAdapter.Transaction = ((SqlCeTransaction) (workTransaction));
                    if(_cacheTableAdapter.Adapter.AcceptChangesDuringUpdate)
                    {
                        _cacheTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(_cacheTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if((UpdateOrder == UpdateOrderOption.UpdateInsertDelete))
                {
                    result = (result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + UpdateInsertedRows(dataSet, allAddedRows));
                }
                else
                {
                    result = (result + UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if((0 < allAddedRows.Count))
                {
                    var rows = new DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for(int i = 0; (i < rows.Length); i = (i + 1))
                    {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if((0 < allChangedRows.Count))
                {
                    var rows = new DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for(int i = 0; (i < rows.Length); i = (i + 1))
                    {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch(Exception ex)
            {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if(BackupDataSetBeforeUpdate)
                {
                    Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else
                {
                    if((0 < allAddedRows.Count))
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for(int i = 0; (i < rows.Length); i = (i + 1))
                        {
                            DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally
            {
                if(workConnOpened)
                {
                    workConnection.Close();
                }
                if((_cacheTableAdapter != null))
                {
                    _cacheTableAdapter.Connection = ((SqlCeConnection) (revertConnections[_cacheTableAdapter]));
                    _cacheTableAdapter.Transaction = null;
                }
                if((0 < adaptersWithAcceptChangesDuringUpdate.Count))
                {
                    var adapters = new DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for(int i = 0; (i < adapters.Length); i = (i + 1))
                    {
                        DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }

        [DebuggerNonUserCode]
        protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
        {
            Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
        }

        [DebuggerNonUserCode]
        protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
        {
            if((_connection != null))
            {
                return true;
            }
            if(((Connection == null)
                || (inputConnection == null)))
            {
                return true;
            }
            if(string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
            {
                return true;
            }
            return false;
        }

        #region Nested type: SelfReferenceComparer

        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, IComparer<DataRow>
        {
            private readonly int _childFirst;
            private readonly DataRelation _relation;

            [DebuggerNonUserCode]
            internal SelfReferenceComparer(DataRelation relation, bool childFirst)
            {
                _relation = relation;
                if(childFirst)
                {
                    _childFirst = -1;
                }
                else
                {
                    _childFirst = 1;
                }
            }

            #region IComparer<DataRow> Members

            [DebuggerNonUserCode]
            public int Compare(DataRow row1, DataRow row2)
            {
                if(ReferenceEquals(row1, row2))
                {
                    return 0;
                }
                if((row1 == null))
                {
                    return -1;
                }
                if((row2 == null))
                {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if(IsChildAndParent(row1, row2))
                {
                    return _childFirst;
                }

                // Is row2 the child or grandchild of row1
                if(IsChildAndParent(row2, row1))
                {
                    return (-1 * _childFirst);
                }
                return 0;
            }

            #endregion

            [DebuggerNonUserCode]
            private bool IsChildAndParent(DataRow child, DataRow parent)
            {
                Debug.Assert((child != null));
                Debug.Assert((parent != null));
                DataRow newParent = child.GetParentRow(_relation, DataRowVersion.Default);
                for(
                    ;
                    ((newParent != null)
                     && ((ReferenceEquals(newParent, child) == false)
                         && (ReferenceEquals(newParent, parent) == false)));
                    )
                {
                    newParent = newParent.GetParentRow(_relation, DataRowVersion.Default);
                }
                if((newParent == null))
                {
                    for(newParent = child.GetParentRow(_relation, DataRowVersion.Original);
                        ((newParent != null)
                         && ((ReferenceEquals(newParent, child) == false)
                             && (ReferenceEquals(newParent, parent) == false)));
                        )
                    {
                        newParent = newParent.GetParentRow(_relation, DataRowVersion.Original);
                    }
                }
                if(ReferenceEquals(newParent, parent))
                {
                    return true;
                }
                return false;
            }
        }

        #endregion
    }
}

#pragma warning restore 1591